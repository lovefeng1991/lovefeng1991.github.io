<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人源码分析记录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.pangpang.fun/"/>
  <updated>2019-12-03T05:38:59.633Z</updated>
  <id>https://www.pangpang.fun/</id>
  
  <author>
    <name>胖胖的世界</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>birthday</title>
    <link href="https://www.pangpang.fun/2019/12/03/birthday/"/>
    <id>https://www.pangpang.fun/2019/12/03/birthday/</id>
    <published>2019-12-03T05:38:03.000Z</published>
    <updated>2019-12-03T05:38:59.633Z</updated>
    
    <content type="html"><![CDATA[<p>2019-12-02<br>11-07</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019-12-02&lt;br&gt;11-07&lt;/p&gt;

      
    
    </summary>
    
      <category term="others" scheme="https://www.pangpang.fun/categories/others/"/>
    
    
      <category term="others" scheme="https://www.pangpang.fun/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>PHP使用迭代器遍历文件</title>
    <link href="https://www.pangpang.fun/2018/09/01/get-files/"/>
    <id>https://www.pangpang.fun/2018/09/01/get-files/</id>
    <published>2018-09-01T06:27:25.000Z</published>
    <updated>2019-11-16T13:10:31.348Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://php.net/manual/zh/book.spl.php" title="SPL" target="_blank" rel="noopener">PHP标准库（SPL）</a>是用于解决典型问题的一组接口与类的集合。</p><p>平时在写代码过程接触SPL比较少，最近在看Symfony源代码过程中，发现它在遍历文件过程中使用到了SPL中的<a href="http://php.net/manual/zh/spl.iterators.php" title="迭代器" target="_blank" rel="noopener">迭代器</a>，感觉挺厉害。</p><p>一般遍历文件会结合使用opendir函数和readdir函数，当然也可以使用glob函数，使用迭代器的情况比较少，下面直接上代码，看Symfony内是如何运用迭代器的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$files = iterator_to_array(<span class="keyword">new</span> \RecursiveIteratorIterator(</span><br><span class="line">    <span class="keyword">new</span> \RecursiveCallbackFilterIterator(</span><br><span class="line">        <span class="keyword">new</span> \RecursiveDirectoryIterator(<span class="keyword">__DIR__</span>, \FilesystemIterator::SKIP_DOTS | \FilesystemIterator::FOLLOW_SYMLINKS),</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="params">(\SplFileInfo $file)</span> </span>&#123; <span class="keyword">return</span> <span class="string">'.'</span> !== $file-&gt;getBasename()[<span class="number">0</span>]; &#125;</span><br><span class="line">    ),</span><br><span class="line">    \RecursiveIteratorIterator::LEAVES_ONLY</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>这段代码会递归获取当前目录下所有的文件。是不是感觉很厉害！以后有时间好好研究下迭代器的使用，感觉能提高写代码的效率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://php.net/manual/zh/book.spl.php&quot; title=&quot;SPL&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHP标准库（SPL）&lt;/a&gt;是用于解决典型问题的一组接口与类的集合。&lt;/p&gt;
&lt;p&gt;平时在
      
    
    </summary>
    
      <category term="php" scheme="https://www.pangpang.fun/categories/php/"/>
    
      <category term="spl" scheme="https://www.pangpang.fun/categories/php/spl/"/>
    
    
      <category term="php" scheme="https://www.pangpang.fun/tags/php/"/>
    
      <category term="迭代器" scheme="https://www.pangpang.fun/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Symfony路由机制-三</title>
    <link href="https://www.pangpang.fun/2018/08/29/symfony-routing-3/"/>
    <id>https://www.pangpang.fun/2018/08/29/symfony-routing-3/</id>
    <published>2018-08-29T10:08:09.000Z</published>
    <updated>2019-11-16T13:10:31.348Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲解Symfony3.4如何缓存路由。</p><p>上一篇文章提到匹配请求的匹配器实际是缓存路由后生成的PHP文件，而PHP文件中的代码主要由PhpMatcherDumper类中dump函数生成，这也是本篇文章分析的重点。</p><p>PhpMatcherDumper类的dump函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dump</span><span class="params">(array $options = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 传入的$options会覆盖下面的值</span></span><br><span class="line">    $options = array_replace(<span class="keyword">array</span>(</span><br><span class="line">        <span class="comment">// 匹配器类名</span></span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'ProjectUrlMatcher'</span>,</span><br><span class="line">        <span class="comment">// 匹配器父类名</span></span><br><span class="line">        <span class="string">'base_class'</span> =&gt; <span class="string">'Symfony\\Component\\Routing\\Matcher\\UrlMatcher'</span>,</span><br><span class="line">    ), $options);</span><br><span class="line"></span><br><span class="line">    $interfaces = class_implements($options[<span class="string">'base_class'</span>]);</span><br><span class="line">    <span class="comment">// 是否支持重定向</span></span><br><span class="line">    $supportsRedirections = <span class="keyword">isset</span>($interfaces[<span class="string">'Symfony\\Component\\Routing\\Matcher\\RedirectableUrlMatcherInterface'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">use Symfony\Component\Routing\Exception\MethodNotAllowedException;</span></span><br><span class="line"><span class="string">use Symfony\Component\Routing\Exception\ResourceNotFoundException;</span></span><br><span class="line"><span class="string">use Symfony\Component\Routing\RequestContext;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string">* This class has been auto-generated</span></span><br><span class="line"><span class="string">* by the Symfony Routing Component.</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string">class <span class="subst">&#123;$options['class']&#125;</span> extends <span class="subst">&#123;$options['base_class']&#125;</span></span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">public function __construct(RequestContext \$context)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    // 初始化<span class="subst">$context</span>，这个值可用于condition配置项中</span></span><br><span class="line"><span class="string">    \$this-&gt;context = \$context;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 生成匹配器类match函数的代码</span></span><br><span class="line"><span class="string"><span class="subst">&#123;$this-&gt;generateMatchMethod($supportsRedirections)&#125;</span></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper.php</p></blockquote><p>PhpMatcherDumper类的generateMatchMethod函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">generateMatchMethod</span><span class="params">($supportsRedirections)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 编译路由，生成代码</span></span><br><span class="line">    $code = rtrim(<span class="keyword">$this</span>-&gt;compileRoutes(<span class="keyword">$this</span>-&gt;getRoutes(), $supportsRedirections), <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// match函数的代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">public function match(\$rawPathinfo)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    \$allow = array();</span></span><br><span class="line"><span class="string">    \$pathinfo = rawurldecode(\$rawPathinfo);</span></span><br><span class="line"><span class="string">    \$trimmedPathinfo = rtrim(\$pathinfo, '/');</span></span><br><span class="line"><span class="string">    \$context = \$this-&gt;context;</span></span><br><span class="line"><span class="string">    \$request = \$this-&gt;request ?: \$this-&gt;createRequest(\$pathinfo);</span></span><br><span class="line"><span class="string">    \$requestMethod = \$canonicalMethod = \$context-&gt;getMethod();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if ('HEAD' === \$requestMethod) &#123;</span></span><br><span class="line"><span class="string">        \$canonicalMethod = 'GET';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">$code</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    throw 0 &lt; count(\$allow) ? new MethodNotAllowedException(array_unique(\$allow)) : new ResourceNotFoundException();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper.php</p></blockquote><p>PhpMatcherDumper类的compileRoutes函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">compileRoutes</span><span class="params">(RouteCollection $routes, $supportsRedirections)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $fetchedHost = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 根据host正则对路由分组</span></span><br><span class="line">    $groups = <span class="keyword">$this</span>-&gt;groupRoutesByHostRegex($routes);</span><br><span class="line">    $code = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($groups <span class="keyword">as</span> $collection) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $regex = $collection-&gt;getAttribute(<span class="string">'host_regex'</span>)) &#123;</span><br><span class="line">            <span class="comment">// 在host正则不为空的情况下，需要获取请求对象中host的值</span></span><br><span class="line">            <span class="keyword">if</span> (!$fetchedHost) &#123;</span><br><span class="line">                <span class="comment">// 这段代码只需要生成一次</span></span><br><span class="line">                $code .= <span class="string">"        \$host = \$context-&gt;getHost();\n\n"</span>;</span><br><span class="line">                $fetchedHost = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 匹配$host的代码</span></span><br><span class="line">            $code .= sprintf(<span class="string">"        if (preg_match(%s, \$host, \$hostMatches)) &#123;\n"</span>, var_export($regex, <span class="keyword">true</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建静态前缀路由集合</span></span><br><span class="line">        $tree = <span class="keyword">$this</span>-&gt;buildStaticPrefixCollection($collection);</span><br><span class="line">        <span class="comment">// 根据路由静态前缀分组，编译路由后生成代码</span></span><br><span class="line">        $groupCode = <span class="keyword">$this</span>-&gt;compileStaticPrefixRoutes($tree, $supportsRedirections);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $regex) &#123;</span><br><span class="line">            <span class="comment">// 添加缩进</span></span><br><span class="line">            $groupCode = preg_replace(<span class="string">'/^.&#123;2,&#125;$/m'</span>, <span class="string">'    $0'</span>, $groupCode);</span><br><span class="line">            $code .= $groupCode;</span><br><span class="line">            <span class="comment">// 与前面host正则不为空对应，添加闭合标签&#125;</span></span><br><span class="line">            $code .= <span class="string">"        &#125;\n\n"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $code .= $groupCode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// used to display the Welcome Page in apps that don't define a homepage</span></span><br><span class="line">    $code .= <span class="string">"        if ('/' === \$pathinfo &amp;&amp; !\$allow) &#123;\n"</span>;</span><br><span class="line">    $code .= <span class="string">"            throw new Symfony\Component\Routing\Exception\NoConfigurationException();\n"</span>;</span><br><span class="line">    $code .= <span class="string">"        &#125;\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>在解析host配置项时，host配置项的值会被解析为字符串，因此host配置项需要使用正则表达式。host配置项使用场景可以用来区分桌面版和移动版页面，比如host: (www|m).pangpang.fun。</p><p><strong>注意：</strong>正则表达式中m选项表示多行模式，^和$匹配每行的开头和结尾。</p><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper.php</p></blockquote><p>groupRoutesByHostRegex函数会将host正则相同的路由分为同一组，同组路由具有连续性。在分组过程中，会编译路由。PhpMatcherDumper类的groupRoutesByHostRegex函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">groupRoutesByHostRegex</span><span class="params">(RouteCollection $routes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 路由组</span></span><br><span class="line">    $groups = <span class="keyword">new</span> DumperCollection();</span><br><span class="line">    <span class="comment">// 当前组</span></span><br><span class="line">    $currentGroup = <span class="keyword">new</span> DumperCollection();</span><br><span class="line">    $currentGroup-&gt;setAttribute(<span class="string">'host_regex'</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 添加子组</span></span><br><span class="line">    $groups-&gt;add($currentGroup);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($routes <span class="keyword">as</span> $name =&gt; $route) &#123;</span><br><span class="line">        <span class="comment">// 编译路由，获取host模式串对应的正则表达式</span></span><br><span class="line">        $hostRegex = $route-&gt;compile()-&gt;getHostRegex();</span><br><span class="line">        <span class="comment">// 在当前组host正则不相等情况下，会新增子路由组</span></span><br><span class="line">        <span class="keyword">if</span> ($currentGroup-&gt;getAttribute(<span class="string">'host_regex'</span>) !== $hostRegex) &#123;</span><br><span class="line">            $currentGroup = <span class="keyword">new</span> DumperCollection();</span><br><span class="line">            $currentGroup-&gt;setAttribute(<span class="string">'host_regex'</span>, $hostRegex);</span><br><span class="line">            $groups-&gt;add($currentGroup);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加DumperRoute</span></span><br><span class="line">        $currentGroup-&gt;add(<span class="keyword">new</span> DumperRoute($name, $route));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $groups;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>host正则相同不代表host配置项的值相同，比如host: “{secondary}.pangpang.fun”,requirements: {secondary: www|m}与host: “{secondary}.pangpang.fun”编译生成的正则表达式完全不同。</p><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper.php</p></blockquote><p>Route类的compile函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">compile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">$this</span>-&gt;compiled) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;compiled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译类，即RouteCompiler类</span></span><br><span class="line">    $class = <span class="keyword">$this</span>-&gt;getOption(<span class="string">'compiler_class'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;compiled = $class::compile(<span class="keyword">$this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Route.php</p></blockquote><p>compile函数会编译host模式串和path模式串，结合其他配置项，比如defaults、requirements，生成正则表达式。RouteCompiler类的compile函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compile</span><span class="params">(Route $route)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $hostVariables = <span class="keyword">array</span>();</span><br><span class="line">    $variables = <span class="keyword">array</span>();</span><br><span class="line">    $hostRegex = <span class="keyword">null</span>;</span><br><span class="line">    $hostTokens = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">''</span> !== $host = $route-&gt;getHost()) &#123;</span><br><span class="line">        <span class="comment">// 编译host模式串</span></span><br><span class="line">        $result = <span class="keyword">self</span>::compilePattern($route, $host, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// host模式串中的变量</span></span><br><span class="line">        $hostVariables = $result[<span class="string">'variables'</span>];</span><br><span class="line">        $variables = $hostVariables;</span><br><span class="line"></span><br><span class="line">        $hostTokens = $result[<span class="string">'tokens'</span>];</span><br><span class="line">        <span class="comment">// host模式串对应的正则表达式</span></span><br><span class="line">        $hostRegex = $result[<span class="string">'regex'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取path模式串</span></span><br><span class="line">    $path = $route-&gt;getPath();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译path模式串</span></span><br><span class="line">    $result = <span class="keyword">self</span>::compilePattern($route, $path, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态前缀</span></span><br><span class="line">    $staticPrefix = $result[<span class="string">'staticPrefix'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// path模式串中的变量数组</span></span><br><span class="line">    $pathVariables = $result[<span class="string">'variables'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($pathVariables <span class="keyword">as</span> $pathParam) &#123;</span><br><span class="line">        <span class="comment">// path模式串中不能包含_fragment变量，也就是说_fragment不能在path配置项中使用，</span></span><br><span class="line">        <span class="comment">// 但能在defaults配置项中使用，虽然没啥作用，_fragment一般用于生成URL中</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'_fragment'</span> === $pathParam) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(<span class="string">'Route pattern "%s" cannot contain "_fragment" as a path parameter.'</span>, $route-&gt;getPath()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并host模式串和path模式串的变量数组</span></span><br><span class="line">    $variables = array_merge($variables, $pathVariables);</span><br><span class="line"></span><br><span class="line">    $tokens = $result[<span class="string">'tokens'</span>];</span><br><span class="line">    <span class="comment">// path模式串对应的正则表达式</span></span><br><span class="line">    $regex = $result[<span class="string">'regex'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CompiledRoute(</span><br><span class="line">        $staticPrefix,</span><br><span class="line">        $regex,</span><br><span class="line">        $tokens,</span><br><span class="line">        $pathVariables,</span><br><span class="line">        $hostRegex,</span><br><span class="line">        $hostTokens,</span><br><span class="line">        $hostVariables,</span><br><span class="line">        array_unique($variables)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>host模式串和path模式串能使用同一变量。</p><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\RouteCompiler.php</p></blockquote><p>RouteCompiler类的compilePattern函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">compilePattern</span><span class="params">(Route $route, $pattern, $isHost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tokens = <span class="keyword">array</span>();</span><br><span class="line">    $variables = <span class="keyword">array</span>();</span><br><span class="line">    $matches = <span class="keyword">array</span>();</span><br><span class="line">    $pos = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 默认分隔符，编译host模式串时，分割符为.；编译path模式串时，分隔符为/</span></span><br><span class="line">    $defaultSeparator = $isHost ? <span class="string">'.'</span> : <span class="string">'/'</span>;</span><br><span class="line">    <span class="comment">// 模式串是否使用utf8字符集</span></span><br><span class="line">    $useUtf8 = preg_match(<span class="string">'//u'</span>, $pattern);</span><br><span class="line">    <span class="comment">// 获取utf8选项</span></span><br><span class="line">    $needsUtf8 = $route-&gt;getOption(<span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!$needsUtf8 &amp;&amp; $useUtf8 &amp;&amp; preg_match(<span class="string">'/[\x80-\xFF]/'</span>, $pattern)) &#123;</span><br><span class="line">        $needsUtf8 = <span class="keyword">true</span>;</span><br><span class="line">        @trigger_error(sprintf(<span class="string">'Using UTF-8 route patterns without setting the "utf8" option is deprecated since Symfony 3.2 and will throw a LogicException in 4.0. Turn on the "utf8" route option for pattern "%s".'</span>, $pattern), E_USER_DEPRECATED);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!$useUtf8 &amp;&amp; $needsUtf8) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \LogicException(sprintf(<span class="string">'Cannot mix UTF-8 requirements with non-UTF-8 pattern "%s".'</span>, $pattern));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取由&#123;&#125;包围的变量，使用\w避免匹配&#123;和&#125;，防止大括号嵌套，比如&#123;foo&#123;bar&#125;&#125;</span></span><br><span class="line">    preg_match_all(<span class="string">'#\&#123;\w+\&#125;#'</span>, $pattern, $matches, PREG_OFFSET_CAPTURE | PREG_SET_ORDER);</span><br><span class="line">    <span class="keyword">foreach</span> ($matches <span class="keyword">as</span> $match) &#123;</span><br><span class="line">        <span class="comment">// 获取变量名</span></span><br><span class="line">        $varName = substr($match[<span class="number">0</span>][<span class="number">0</span>], <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// 获取当前变量前面的静态文本</span></span><br><span class="line">        $precedingText = substr($pattern, $pos, $match[<span class="number">0</span>][<span class="number">1</span>] - $pos);</span><br><span class="line">        <span class="comment">// 更新$pos</span></span><br><span class="line">        $pos = $match[<span class="number">0</span>][<span class="number">1</span>] + \strlen($match[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前变量前面的静态字符</span></span><br><span class="line">        <span class="keyword">if</span> (!\strlen($precedingText)) &#123;</span><br><span class="line">            $precedingChar = <span class="string">''</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($useUtf8) &#123;</span><br><span class="line">            <span class="comment">// 使用u选项匹配utf8</span></span><br><span class="line">            preg_match(<span class="string">'/.$/u'</span>, $precedingText, $precedingChar);</span><br><span class="line">            $precedingChar = $precedingChar[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $precedingChar = substr($precedingText, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 是否为分隔符</span></span><br><span class="line">        $isSeparator = <span class="string">''</span> !== $precedingChar &amp;&amp; <span class="keyword">false</span> !== strpos(<span class="keyword">static</span>::SEPARATORS, $precedingChar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// A PCRE subpattern name must start with a non-digit. Also a PHP variable cannot start with a digit so the</span></span><br><span class="line">        <span class="comment">// variable would not be usable as a Controller action argument.</span></span><br><span class="line">        <span class="comment">// 变量名不能以数字开头</span></span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/^\d/'</span>, $varName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \DomainException(sprintf(<span class="string">'Variable name "%s" cannot start with a digit in route pattern "%s". Please use a different name.'</span>, $varName, $pattern));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不能重复使用变量名，比如path: /default/&#123;id&#125;/&#123;id&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (\in_array($varName, $variables)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \LogicException(sprintf(<span class="string">'Route pattern "%s" cannot reference variable name "%s" more than once.'</span>, $pattern, $varName));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 变量名长度不能超过32</span></span><br><span class="line">        <span class="keyword">if</span> (\strlen($varName) &gt; <span class="keyword">self</span>::VARIABLE_MAXIMUM_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \DomainException(sprintf(<span class="string">'Variable name "%s" cannot be longer than %s characters in route pattern "%s". Please use a shorter name.'</span>, $varName, <span class="keyword">self</span>::VARIABLE_MAXIMUM_LENGTH, $pattern));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($isSeparator &amp;&amp; $precedingText !== $precedingChar) &#123;</span><br><span class="line">            <span class="comment">// 比如path: /default/employees/&#123;id&#125;</span></span><br><span class="line">            <span class="comment">// 添加文本token，去掉末尾分隔符</span></span><br><span class="line">            $tokens[] = <span class="keyword">array</span>(<span class="string">'text'</span>, substr($precedingText, <span class="number">0</span>, -\strlen($precedingChar)));</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (!$isSeparator &amp;&amp; \strlen($precedingText) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 比如path: /default/test&#123;id&#125;</span></span><br><span class="line">            $tokens[] = <span class="keyword">array</span>(<span class="string">'text'</span>, $precedingText);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从requirements配置项获取变量名正则</span></span><br><span class="line">        $regexp = $route-&gt;getRequirement($varName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> === $regexp) &#123;</span><br><span class="line">            $followingPattern = (string) substr($pattern, $pos);</span><br><span class="line">            <span class="comment">// Find the next static character after the variable that functions as a separator. By default, this separator and '/'</span></span><br><span class="line">            <span class="comment">// are disallowed for the variable. This default requirement makes sure that optional variables can be matched at all</span></span><br><span class="line">            <span class="comment">// and that the generating-matching-combination of URLs unambiguous, i.e. the params used for generating the URL are</span></span><br><span class="line">            <span class="comment">// the same that will be matched. Example: new Route('/&#123;page&#125;.&#123;_format&#125;', array('_format' =&gt; 'html'))</span></span><br><span class="line">            <span class="comment">// If &#123;page&#125; would also match the separating dot, &#123;_format&#125; would never match as &#123;page&#125; will eagerly consume everything.</span></span><br><span class="line">            <span class="comment">// Also even if &#123;_format&#125; was not optional the requirement prevents that &#123;page&#125; matches something that was originally</span></span><br><span class="line">            <span class="comment">// part of &#123;_format&#125; when generating the URL, e.g. _format = 'mobile.html'.</span></span><br><span class="line">            $nextSeparator = <span class="keyword">self</span>::findNextSeparator($followingPattern, $useUtf8);</span><br><span class="line">            $regexp = sprintf(</span><br><span class="line">                <span class="string">'[^%s%s]+'</span>,</span><br><span class="line">                preg_quote($defaultSeparator, <span class="keyword">self</span>::REGEX_DELIMITER),</span><br><span class="line">                $defaultSeparator !== $nextSeparator &amp;&amp; <span class="string">''</span> !== $nextSeparator ? preg_quote($nextSeparator, <span class="keyword">self</span>::REGEX_DELIMITER) : <span class="string">''</span></span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> ((<span class="string">''</span> !== $nextSeparator &amp;&amp; !preg_match(<span class="string">'#^\&#123;\w+\&#125;#'</span>, $followingPattern)) || <span class="string">''</span> === $followingPattern) &#123;</span><br><span class="line">                <span class="comment">// When we have a separator, which is disallowed for the variable, we can optimize the regex with a possessive</span></span><br><span class="line">                <span class="comment">// quantifier. This prevents useless backtracking of PCRE and improves performance by 20% for matching those patterns.</span></span><br><span class="line">                <span class="comment">// Given the above example, there is no point in backtracking into &#123;page&#125; (that forbids the dot) when a dot must follow</span></span><br><span class="line">                <span class="comment">// after it. This optimization cannot be applied when the next char is no real separator or when the next variable is</span></span><br><span class="line">                <span class="comment">// directly adjacent, e.g. '/&#123;x&#125;&#123;y&#125;'.</span></span><br><span class="line">                $regexp .= <span class="string">'+'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">'//u'</span>, $regexp)) &#123;</span><br><span class="line">                <span class="comment">// 变量名正则未使用utf8字符集</span></span><br><span class="line">                $useUtf8 = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (!$needsUtf8 &amp;&amp; preg_match(<span class="string">'/[\x80-\xFF]|(?&lt;!\\\\)\\\\(?:\\\\\\\\)*+(?-i:X|[pP][\&#123;CLMNPSZ]|x\&#123;[A-Fa-f0-9]&#123;3&#125;)/'</span>, $regexp)) &#123;</span><br><span class="line">                <span class="comment">// 变量名正则使用utf8字符集，但未设置utf8选项</span></span><br><span class="line">                $needsUtf8 = <span class="keyword">true</span>;</span><br><span class="line">                @trigger_error(sprintf(<span class="string">'Using UTF-8 route requirements without setting the "utf8" option is deprecated since Symfony 3.2 and will throw a LogicException in 4.0. Turn on the "utf8" route option for variable "%s" in pattern "%s".'</span>, $varName, $pattern), E_USER_DEPRECATED);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!$useUtf8 &amp;&amp; $needsUtf8) &#123;</span><br><span class="line">                <span class="comment">// 变量名正则未使用utf8字符集，但却设置了utf8选项</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> \LogicException(sprintf(<span class="string">'Cannot mix UTF-8 requirement with non-UTF-8 charset for variable "%s" in pattern "%s".'</span>, $varName, $pattern));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加变量token</span></span><br><span class="line">        $tokens[] = <span class="keyword">array</span>(<span class="string">'variable'</span>, $isSeparator ? $precedingChar : <span class="string">''</span>, $regexp, $varName);</span><br><span class="line">        <span class="comment">// 添加变量名</span></span><br><span class="line">        $variables[] = $varName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理完所有变量后，还未到模式串结尾，那剩下的字符串肯定为文本token</span></span><br><span class="line">    <span class="keyword">if</span> ($pos &lt; \strlen($pattern)) &#123;</span><br><span class="line">        <span class="comment">// 添加文本token</span></span><br><span class="line">        $tokens[] = <span class="keyword">array</span>(<span class="string">'text'</span>, substr($pattern, $pos));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到第一个可选token，显然token必须为变量token，并且需要设置默认值，这里只考虑了path模式串</span></span><br><span class="line">    $firstOptional = PHP_INT_MAX;</span><br><span class="line">    <span class="keyword">if</span> (!$isHost) &#123;</span><br><span class="line">        <span class="comment">// 考虑path: /&#123;_locale&#125;/default/employees/&#123;id&#125;，假设变量_locale和id都设置了默认值，</span></span><br><span class="line">        <span class="comment">// 变量token(id)是第一个可选token，也就是可以不用传参数，/en/default/employees能正确匹配，</span></span><br><span class="line">        <span class="comment">// 而变量token(_locale)必须传参数，尽管设置了默认值，/default/employees/1无法正确匹配，</span></span><br><span class="line">        <span class="comment">// 也就是说寻找第一个可选token过程中，会考虑变量token的连续性</span></span><br><span class="line">        <span class="keyword">for</span> ($i = \count($tokens) - <span class="number">1</span>; $i &gt;= <span class="number">0</span>; --$i) &#123;</span><br><span class="line">            <span class="comment">// 从后向前找</span></span><br><span class="line">            $token = $tokens[$i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'variable'</span> === $token[<span class="number">0</span>] &amp;&amp; $route-&gt;hasDefault($token[<span class="number">3</span>])) &#123;</span><br><span class="line">                $firstOptional = $i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $regexp = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>, $nbToken = \count($tokens); $i &lt; $nbToken; ++$i) &#123;</span><br><span class="line">        <span class="comment">// 计算正则表达式</span></span><br><span class="line">        $regexp .= <span class="keyword">self</span>::computeRegexp($tokens, $i, $firstOptional);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用默认分隔符拼接出最终的正则表达式，对于host模式串，会添加i选项，即忽略大小写</span></span><br><span class="line">    $regexp = <span class="keyword">self</span>::REGEX_DELIMITER.<span class="string">'^'</span>.$regexp.<span class="string">'$'</span>.<span class="keyword">self</span>::REGEX_DELIMITER.<span class="string">'sD'</span>.($isHost ? <span class="string">'i'</span> : <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持utf8匹配需要拼接u选项</span></span><br><span class="line">    <span class="keyword">if</span> ($needsUtf8) &#123;</span><br><span class="line">        $regexp .= <span class="string">'u'</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>, $nbToken = \count($tokens); $i &lt; $nbToken; ++$i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'variable'</span> === $tokens[$i][<span class="number">0</span>]) &#123;</span><br><span class="line">                $tokens[$i][] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'staticPrefix'</span> =&gt; <span class="keyword">self</span>::determineStaticPrefix($route, $tokens),     <span class="comment">// 静态前缀</span></span><br><span class="line">        <span class="string">'regex'</span> =&gt; $regexp,                                                 <span class="comment">// 正则表达式</span></span><br><span class="line">        <span class="string">'tokens'</span> =&gt; array_reverse($tokens),                                 <span class="comment">// tokens数组</span></span><br><span class="line">        <span class="string">'variables'</span> =&gt; $variables,                                          <span class="comment">// 变量名</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>options配置项<strong>似乎</strong>只有compiler_class和utf8选项有效。</p><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\RouteCompiler.php</p></blockquote><p>RouteCompiler类的常量属性SEPARATORS定义了正则表达式可用的分隔符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SEPARATORS = <span class="string">'/,;.:-_~+*=@|'</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>PHP正则表达式分隔符可以是任意非字母数字、非反斜线（\）、非空白字符。具体见<a href="http://php.net/manual/zh/regexp.reference.delimiters.php" title="分隔符" target="_blank" rel="noopener">http://php.net/manual/zh/regexp.reference.delimiters.php</a>。</p></blockquote><p>RouteCompiler类的常量属性REGEX_DELIMITER定义了默认分隔符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> REGEX_DELIMITER = <span class="string">'#'</span>;</span><br></pre></td></tr></table></figure><p>RouteCompiler类的常量属性VARIABLE_MAXIMUM_LENGTH定义了变量的最大长度。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VARIABLE_MAXIMUM_LENGTH = <span class="number">32</span>;</span><br></pre></td></tr></table></figure><p>RouteCompiler类的findNextSeparator函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">findNextSeparator</span><span class="params">($pattern, $useUtf8)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">''</span> == $pattern) &#123;</span><br><span class="line">        <span class="comment">// return empty string if pattern is empty or false (false which can be returned by substr)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// first remove all placeholders from the pattern so we can find the next real static character</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">''</span> === $pattern = preg_replace(<span class="string">'#\&#123;\w+\&#125;#'</span>, <span class="string">''</span>, $pattern)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($useUtf8) &#123;</span><br><span class="line">        preg_match(<span class="string">'/^./u'</span>, $pattern, $pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span> !== strpos(<span class="keyword">static</span>::SEPARATORS, $pattern[<span class="number">0</span>]) ? $pattern[<span class="number">0</span>] : <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>computeRegexp函数用来转义文本token和计算可选token生成的正则表达式。RouteCompiler类的computeRegexp函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">computeRegexp</span><span class="params">(array $tokens, $index, $firstOptional)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $token = $tokens[$index];</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'text'</span> === $token[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="comment">// 转义文本token，除了转义特殊符号外额外需要转义#，因为#是生成最终正则表达式的默认分隔符</span></span><br><span class="line">        <span class="keyword">return</span> preg_quote($token[<span class="number">1</span>], <span class="keyword">self</span>::REGEX_DELIMITER);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 变量token，需要考虑可选token</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === $index &amp;&amp; <span class="number">0</span> === $firstOptional) &#123;</span><br><span class="line">            <span class="comment">// 当仅有一个token并且为可选token的时候，分隔符是必需的，比如path: /&#123;test&#125;，</span></span><br><span class="line">            <span class="comment">// 可选token生成的正则表达式结尾多个?</span></span><br><span class="line">            <span class="keyword">return</span> sprintf(<span class="string">'%s(?P&lt;%s&gt;%s)?'</span>, preg_quote($token[<span class="number">1</span>], <span class="keyword">self</span>::REGEX_DELIMITER), $token[<span class="number">3</span>], $token[<span class="number">2</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 比如path: /default/employees/&#123;id&#125;.&#123;_format&#125;,defaults: &#123;_format: html&#125;</span></span><br><span class="line">            $regexp = sprintf(<span class="string">'%s(?P&lt;%s&gt;%s)'</span>, preg_quote($token[<span class="number">1</span>], <span class="keyword">self</span>::REGEX_DELIMITER), $token[<span class="number">3</span>], $token[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> ($index &gt;= $firstOptional) &#123;</span><br><span class="line">                $regexp = <span class="string">"(?:$regexp"</span>;</span><br><span class="line">                $nbTokens = \count($tokens);</span><br><span class="line">                <span class="keyword">if</span> ($nbTokens - <span class="number">1</span> == $index) &#123;</span><br><span class="line">                    <span class="comment">// 遍历到最后一个token时，需要保证所有可选token都能正确闭合，即保证(?:与)?成对出现</span></span><br><span class="line">                    <span class="comment">// 前面$firstOptional为0的时候，使用了%s(?P&lt;%s&gt;%s)?作为正则，这里拼接)?次数要减去1</span></span><br><span class="line">                    $regexp .= str_repeat(<span class="string">')?'</span>, $nbTokens - $firstOptional - (<span class="number">0</span> === $firstOptional ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $regexp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>PHP中正则表达式的特殊字符有：.+*?[^]$(){}=!&lt;&gt;|:-。具体见<a href="http://php.net/manual/zh/function.preg-quote.php" title="preg_quote" target="_blank" rel="noopener">http://php.net/manual/zh/function.preg-quote.php</a></p></blockquote><p>determineStaticPrefix函数确定路由的静态前缀，后面会利用它分组。RouteCompiler类的determineStaticPrefix函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">determineStaticPrefix</span><span class="params">(Route $route, array $tokens)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 比如path: /&#123;_locale&#125;/default/about/&#123;id&#125;，返回空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'text'</span> !== $tokens[<span class="number">0</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> ($route-&gt;hasDefault($tokens[<span class="number">0</span>][<span class="number">3</span>]) || <span class="string">'/'</span> === $tokens[<span class="number">0</span>][<span class="number">1</span>]) ? <span class="string">''</span> : $tokens[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $prefix = $tokens[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($tokens[<span class="number">1</span>][<span class="number">1</span>]) &amp;&amp; <span class="string">'/'</span> !== $tokens[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; <span class="keyword">false</span> === $route-&gt;hasDefault($tokens[<span class="number">1</span>][<span class="number">3</span>])) &#123;</span><br><span class="line">        <span class="comment">// 比如path: /defalut/avatar.&#123;_format&#125;，返回/defalut/avatar.</span></span><br><span class="line">        $prefix .= $tokens[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比如path: /defalut/avatar.&#123;_format&#125;,defaults: &#123;_format: jpg&#125;，返回/defalut/avatar</span></span><br><span class="line">    <span class="keyword">return</span> $prefix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PhpMatcherDumper类的buildStaticPrefixCollection函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildStaticPrefixCollection</span><span class="params">(DumperCollection $collection)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 静态前缀路由集合</span></span><br><span class="line">    $prefixCollection = <span class="keyword">new</span> StaticPrefixCollection();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($collection <span class="keyword">as</span> $dumperRoute) &#123;</span><br><span class="line">        <span class="comment">// 获取静态前缀</span></span><br><span class="line">        $prefix = $dumperRoute-&gt;getRoute()-&gt;compile()-&gt;getStaticPrefix();</span><br><span class="line">        $prefixCollection-&gt;addRoute($prefix, $dumperRoute);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优化分组</span></span><br><span class="line">    $prefixCollection-&gt;optimizeGroups();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $prefixCollection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper.php</p></blockquote><p>StaticPrefixCollection类的addRoute函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addRoute</span><span class="params">($prefix, $route)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $prefix = <span class="string">'/'</span> === $prefix ? $prefix : rtrim($prefix, <span class="string">'/'</span>);</span><br><span class="line">    <span class="comment">// 防止添加不被接受的路由</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;guardAgainstAddingNotAcceptedRoutes($prefix);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;prefix === $prefix) &#123;</span><br><span class="line">        <span class="comment">// 路由集合的前缀与路由前缀严格相等的情况下，直接添加路由，并设置匹配开始位置，防止重复比较，</span></span><br><span class="line">        <span class="comment">// 注意这里的===</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;items[] = <span class="keyword">array</span>($prefix, $route);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;matchStart = \count(<span class="keyword">$this</span>-&gt;items);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不相等的情况下，需要遍历$items逐个比较，提取公共前缀，调整分组</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;items <span class="keyword">as</span> $i =&gt; $item) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($i &lt; <span class="keyword">$this</span>-&gt;matchStart) &#123;</span><br><span class="line">            <span class="comment">// 防止重复比较</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($item <span class="keyword">instanceof</span> <span class="keyword">self</span> &amp;&amp; $item-&gt;accepts($prefix)) &#123;</span><br><span class="line">            <span class="comment">// 递归调用，进入这里说明$item和$route有公共前缀</span></span><br><span class="line">            $item-&gt;addRoute($prefix, $route);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// $item和$route组成子路由集合，成功返回新组，失败返回null</span></span><br><span class="line">        $group = <span class="keyword">$this</span>-&gt;groupWithItem($item, $prefix, $route);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($group <span class="keyword">instanceof</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="comment">// 替换成子路由集合</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;items[$i] = $group;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历$items后无法组成新组，直接添加</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;items[] = <span class="keyword">array</span>($prefix, $route);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>父路由集合前缀为空，可以接受所有路由。</p><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Matcher\Dumper\StaticPrefixCollection.php</p></blockquote><p>StaticPrefixCollection类的guardAgainstAddingNotAcceptedRoutes函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">guardAgainstAddingNotAcceptedRoutes</span><span class="params">($prefix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;accepts($prefix)) &#123;</span><br><span class="line">        $message = sprintf(<span class="string">'Could not add route with prefix %s to collection with prefix %s'</span>, $prefix, <span class="keyword">$this</span>-&gt;prefix);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \LogicException($message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>accepts函数规定了路由集合接受哪些路由。第一种情况，路由集合的前缀为空情况下，接受所有路由；第二种情况，路由集合的前缀是路由的前缀的前缀时，接受该路由。StaticPrefixCollection类的accepts函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">accepts</span><span class="params">($prefix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span> === <span class="keyword">$this</span>-&gt;prefix || <span class="number">0</span> === strpos($prefix, <span class="keyword">$this</span>-&gt;prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StaticPrefixCollection的groupWithItem函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">groupWithItem</span><span class="params">($item, $prefix, $route)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取前缀</span></span><br><span class="line">    $itemPrefix = $item <span class="keyword">instanceof</span> <span class="keyword">self</span> ? $item-&gt;prefix : $item[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 获取公共前缀</span></span><br><span class="line">    $commonPrefix = <span class="keyword">$this</span>-&gt;detectCommonPrefix($prefix, $itemPrefix);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!$commonPrefix) &#123;</span><br><span class="line">        <span class="comment">// 无公共前缀或者公共前缀比路由集合的前缀短，直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $item和$route组成子路由集合，</span></span><br><span class="line">    $child = <span class="keyword">new</span> <span class="keyword">self</span>($commonPrefix);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子路由集合添加$item</span></span><br><span class="line">    <span class="keyword">if</span> ($item <span class="keyword">instanceof</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// $item为路由集合</span></span><br><span class="line">        $child-&gt;items = <span class="keyword">array</span>($item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// $item为数组</span></span><br><span class="line">        $child-&gt;addRoute($item[<span class="number">0</span>], $item[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子路由集合添加$route</span></span><br><span class="line">    $child-&gt;addRoute($prefix, $route);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StaticPrefixCollection的detectCommonPrefix函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">detectCommonPrefix</span><span class="params">($prefix, $anotherPrefix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $baseLength = \strlen(<span class="keyword">$this</span>-&gt;prefix);</span><br><span class="line">    $commonLength = $baseLength;</span><br><span class="line">    $end = min(\strlen($prefix), \strlen($anotherPrefix));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i = $baseLength; $i &lt;= $end; ++$i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (substr($prefix, <span class="number">0</span>, $i) !== substr($anotherPrefix, <span class="number">0</span>, $i)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $commonLength = $i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共前缀</span></span><br><span class="line">    $commonPrefix = rtrim(substr($prefix, <span class="number">0</span>, $commonLength), <span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共前缀比路由集合的前缀长时，返回</span></span><br><span class="line">    <span class="keyword">if</span> (\strlen($commonPrefix) &gt; $baseLength) &#123;</span><br><span class="line">        <span class="keyword">return</span> $commonPrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PhpMatcherDumper类的compileStaticPrefixRoutes函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">compileStaticPrefixRoutes</span><span class="params">(StaticPrefixCollection $collection, $supportsRedirections, $ifOrElseIf = <span class="string">'if'</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $code = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">// 获取前缀</span></span><br><span class="line">    $prefix = $collection-&gt;getPrefix();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($prefix) &amp;&amp; <span class="string">'/'</span> !== $prefix) &#123;</span><br><span class="line">        <span class="comment">// 前缀不为空的情况下，先匹配前缀</span></span><br><span class="line">        $code .= sprintf(<span class="string">"    %s (0 === strpos(\$pathinfo, %s)) &#123;\n"</span>, $ifOrElseIf, var_export($prefix, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ifOrElseIf = <span class="string">'if'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($collection-&gt;getItems() <span class="keyword">as</span> $route) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($route <span class="keyword">instanceof</span> StaticPrefixCollection) &#123;</span><br><span class="line">            <span class="comment">// 递归调用</span></span><br><span class="line">            $code .= <span class="keyword">$this</span>-&gt;compileStaticPrefixRoutes($route, $supportsRedirections, $ifOrElseIf);</span><br><span class="line">            $ifOrElseIf = <span class="string">'elseif'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $code .= <span class="keyword">$this</span>-&gt;compileRoute($route[<span class="number">1</span>]-&gt;getRoute(), $route[<span class="number">1</span>]-&gt;getName(), $supportsRedirections, $prefix).<span class="string">"\n"</span>;</span><br><span class="line">            $ifOrElseIf = <span class="string">'if'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($prefix) &amp;&amp; <span class="string">'/'</span> !== $prefix) &#123;</span><br><span class="line">        $code .= <span class="string">"    &#125;\n\n"</span>;</span><br><span class="line">        <span class="comment">// apply extra indention at each line (except empty ones)</span></span><br><span class="line">        $code = preg_replace(<span class="string">'/^.&#123;2,&#125;$/m'</span>, <span class="string">'    $0'</span>, $code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下，文件系统的路径中带有尾斜杠代表目录（/home/lovefeng1991/log/），反之代表文件（/home/lovefeng1991/log）。而浏览器会把这两种情况按相同URL路径处理，比如<code>https://example.com/foo/</code>和<code>https://example.com/foo</code>会按同一URL处理。Symfony使用重定向的方法来处理这种逻辑，但仅在处理GET和HEAD请求。具体见<a href="https://symfony.com/doc/3.4/routing.html#redirecting-urls-with-trailing-slashes" title="redirecting-urls-with-trailing-slashes" target="_blank" rel="noopener">https://symfony.com/doc/3.4/routing.html#redirecting-urls-with-trailing-slashes</a>。</p><table><thead><tr><th align="left">路由路径</th><th align="left">请求路径为/foo</th><th align="left">请求路径为/foo/</th></tr></thead><tbody><tr><td align="left">/foo</td><td align="left">匹配成功，返回200状态码</td><td align="left">匹配失败，返回404状态码</td></tr><tr><td align="left">/foo/</td><td align="left">301重定向到/foo/</td><td align="left">匹配成功，返回200状态码</td></tr></tbody></table><p>PhpMatcherDumper类的compileRoute函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">compileRoute</span><span class="params">(Route $route, $name, $supportsRedirections, $parentPrefix = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $code = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">// 已经编译过的路由</span></span><br><span class="line">    $compiledRoute = $route-&gt;compile();</span><br><span class="line">    $conditions = <span class="keyword">array</span>();</span><br><span class="line">    <span class="comment">// 是否有尾斜杠</span></span><br><span class="line">    $hasTrailingSlash = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// path是否匹配</span></span><br><span class="line">    $matches = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// host是否匹配</span></span><br><span class="line">    $hostMatches = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 获取路由methods配置项的值</span></span><br><span class="line">    $methods = $route-&gt;getMethods();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否支持尾斜杠</span></span><br><span class="line">    $supportsTrailingSlash = $supportsRedirections &amp;&amp; (!$methods || \in_array(<span class="string">'GET'</span>, $methods));</span><br><span class="line">    <span class="comment">// 获取path正则</span></span><br><span class="line">    $regex = $compiledRoute-&gt;getRegex();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面这个正则用来匹配正则表示式，捕获的内容会被分组到url中，比如#^\d+$#，$m['url']的值为\d+</span></span><br><span class="line">    <span class="keyword">if</span> (!\count($compiledRoute-&gt;getPathVariables()) &amp;&amp; <span class="keyword">false</span> !== preg_match(<span class="string">'#^(.)\^(?P&lt;url&gt;.*?)\$\1#'</span>.(<span class="string">'u'</span> === substr($regex, <span class="number">-1</span>) ? <span class="string">'u'</span> : <span class="string">''</span>), $regex, $m)) &#123;</span><br><span class="line">        <span class="comment">// path中不包含变量</span></span><br><span class="line">        <span class="keyword">if</span> ($supportsTrailingSlash &amp;&amp; <span class="string">'/'</span> === substr($m[<span class="string">'url'</span>], <span class="number">-1</span>)) &#123;</span><br><span class="line">            <span class="comment">// 去掉尾斜杠</span></span><br><span class="line">            $conditions[] = sprintf(<span class="string">'%s === $trimmedPathinfo'</span>, var_export(rtrim(str_replace(<span class="string">'\\'</span>, <span class="string">''</span>, $m[<span class="string">'url'</span>]), <span class="string">'/'</span>), <span class="keyword">true</span>));</span><br><span class="line">            $hasTrailingSlash = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $conditions[] = sprintf(<span class="string">'%s === $pathinfo'</span>, var_export(str_replace(<span class="string">'\\'</span>, <span class="string">''</span>, $m[<span class="string">'url'</span>]), <span class="keyword">true</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// path中包含变量</span></span><br><span class="line">        <span class="keyword">if</span> ($compiledRoute-&gt;getStaticPrefix() &amp;&amp; $compiledRoute-&gt;getStaticPrefix() !== $parentPrefix) &#123;</span><br><span class="line">            <span class="comment">// 父前缀已经编译过，忽略父前缀</span></span><br><span class="line">            $conditions[] = sprintf(<span class="string">'0 === strpos($pathinfo, %s)'</span>, var_export($compiledRoute-&gt;getStaticPrefix(), <span class="keyword">true</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($supportsTrailingSlash &amp;&amp; $pos = strpos($regex, <span class="string">'/$'</span>)) &#123;</span><br><span class="line">            <span class="comment">// /后拼接?表示尾斜杠可选</span></span><br><span class="line">            $regex = substr($regex, <span class="number">0</span>, $pos).<span class="string">'/?$'</span>.substr($regex, $pos + <span class="number">2</span>);</span><br><span class="line">            $hasTrailingSlash = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $conditions[] = sprintf(<span class="string">'preg_match(%s, $pathinfo, $matches)'</span>, var_export($regex, <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">        $matches = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($compiledRoute-&gt;getHostVariables()) &#123;</span><br><span class="line">        <span class="comment">// host中包含变量</span></span><br><span class="line">        $hostMatches = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($route-&gt;getCondition()) &#123;</span><br><span class="line">        <span class="comment">// 编译condition配置项</span></span><br><span class="line">        $conditions[] = <span class="keyword">$this</span>-&gt;getExpressionLanguage()-&gt;compile($route-&gt;getCondition(), <span class="keyword">array</span>(<span class="string">'context'</span>, <span class="string">'request'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接条件代码，主要有三部分组成，前缀，path正则和condition配置项</span></span><br><span class="line">    $conditions = implode(<span class="string">' &amp;&amp; '</span>, $conditions);</span><br><span class="line"></span><br><span class="line">    $code .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">    // <span class="subst">$name</span></span></span><br><span class="line"><span class="string">    if (<span class="subst">$conditions</span>) &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"></span><br><span class="line">    $gotoname = <span class="string">'not_'</span>.preg_replace(<span class="string">'/[^A-Za-z0-9_]/'</span>, <span class="string">''</span>, $name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 12表示3个缩进，以4个空格为单位</span></span><br><span class="line">    $retOffset = <span class="number">12</span> + \strlen($code);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($matches || $hostMatches) &#123;</span><br><span class="line">        $vars = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> ($hostMatches) &#123;</span><br><span class="line">            $vars[] = <span class="string">'$hostMatches'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($matches) &#123;</span><br><span class="line">            $vars[] = <span class="string">'$matches'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $vars[] = <span class="string">"array('_route' =&gt; '$name')"</span>;</span><br><span class="line"></span><br><span class="line">        $code .= sprintf(</span><br><span class="line">            <span class="string">"            \$ret = \$this-&gt;mergeDefaults(array_replace(%s), %s);\n"</span>,</span><br><span class="line">            implode(<span class="string">', '</span>, $vars),</span><br><span class="line">            str_replace(<span class="string">"\n"</span>, <span class="string">''</span>, var_export($route-&gt;getDefaults(), <span class="keyword">true</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($route-&gt;getDefaults()) &#123;</span><br><span class="line">        <span class="comment">// 路由有默认值</span></span><br><span class="line">        $code .= sprintf(<span class="string">"            \$ret = %s;\n"</span>, str_replace(<span class="string">"\n"</span>, <span class="string">''</span>, var_export(array_replace($route-&gt;getDefaults(), <span class="keyword">array</span>(<span class="string">'_route'</span> =&gt; $name)), <span class="keyword">true</span>)));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 路由无默认值，因为未设置controller配置项；在设置controller配置项的情况下，会有默认配置项_controller</span></span><br><span class="line">        $code .= sprintf(<span class="string">"            \$ret = array('_route' =&gt; '%s');\n"</span>, $name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// path正则有尾斜杠</span></span><br><span class="line">    <span class="keyword">if</span> ($hasTrailingSlash) &#123;</span><br><span class="line">        $code .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">        if ('/' === substr(\$pathinfo, -1)) &#123;</span></span><br><span class="line"><span class="string">            // 什么都不用做</span></span><br><span class="line"><span class="string">        &#125; elseif ('GET' !== \$canonicalMethod) &#123;</span></span><br><span class="line"><span class="string">            // 前面在请求方法为HEAD时，<span class="subst">$canonicalMethod</span>会设置为GET，保证在HEAD请求下处理尾斜杠</span></span><br><span class="line"><span class="string">            goto <span class="subst">$gotoname</span>;</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            // 301重定向</span></span><br><span class="line"><span class="string">            return array_replace(\$ret, \$this-&gt;redirect(\$rawPathinfo.'/', '<span class="subst">$name</span>'));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($methods) &#123;</span><br><span class="line">        $methodVariable = \in_array(<span class="string">'GET'</span>, $methods) ? <span class="string">'$canonicalMethod'</span> : <span class="string">'$requestMethod'</span>;</span><br><span class="line">        <span class="comment">// 拼接methods配置项的值</span></span><br><span class="line">        $methods = implode(<span class="string">"', '"</span>, $methods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取schemes</span></span><br><span class="line">    <span class="keyword">if</span> ($schemes = $route-&gt;getSchemes()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!$supportsRedirections) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \LogicException(<span class="string">'The "schemes" requirement is only supported for URL matchers that implement RedirectableUrlMatcherInterface.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $schemes = str_replace(<span class="string">"\n"</span>, <span class="string">''</span>, var_export(array_flip($schemes), <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">if</span> ($methods) &#123;</span><br><span class="line">            $code .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">        \$requiredSchemes = <span class="subst">$schemes</span>;</span></span><br><span class="line"><span class="string">        \$hasRequiredScheme = isset(\$requiredSchemes[\$context-&gt;getScheme()]);</span></span><br><span class="line"><span class="string">        if (!in_array(<span class="subst">$methodVariable</span>, array('<span class="subst">$methods</span>'))) &#123;</span></span><br><span class="line"><span class="string">            if (\$hasRequiredScheme) &#123;</span></span><br><span class="line"><span class="string">                \$allow = array_merge(\$allow, array('<span class="subst">$methods</span>'));</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            // method未匹配时，直接跳出</span></span><br><span class="line"><span class="string">            goto <span class="subst">$gotoname</span>;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (!\$hasRequiredScheme) &#123;</span></span><br><span class="line"><span class="string">            if ('GET' !== \$canonicalMethod) &#123;</span></span><br><span class="line"><span class="string">                goto <span class="subst">$gotoname</span>;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            // 在scheme未匹配，请求方法为GET和HEAD请求时，会发生301重定向</span></span><br><span class="line"><span class="string">            return array_replace(\$ret, \$this-&gt;redirect(\$rawPathinfo, '<span class="subst">$name</span>', key(\$requiredSchemes)));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $code .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">        \$requiredSchemes = <span class="subst">$schemes</span>;</span></span><br><span class="line"><span class="string">        if (!isset(\$requiredSchemes[\$context-&gt;getScheme()])) &#123;</span></span><br><span class="line"><span class="string">            if ('GET' !== \$canonicalMethod) &#123;</span></span><br><span class="line"><span class="string">                goto <span class="subst">$gotoname</span>;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            // 与上面类似</span></span><br><span class="line"><span class="string">            return array_replace(\$ret, \$this-&gt;redirect(\$rawPathinfo, '<span class="subst">$name</span>', key(\$requiredSchemes)));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($methods) &#123;</span><br><span class="line">        $code .= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">        if (!in_array(<span class="subst">$methodVariable</span>, array('<span class="subst">$methods</span>'))) &#123;</span></span><br><span class="line"><span class="string">            // method未匹配时，直接跳出</span></span><br><span class="line"><span class="string">            \$allow = array_merge(\$allow, array('<span class="subst">$methods</span>'));</span></span><br><span class="line"><span class="string">            goto <span class="subst">$gotoname</span>;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($hasTrailingSlash || $schemes || $methods) &#123;</span><br><span class="line">        $code .= <span class="string">"            return \$ret;\n"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将"$ret ="替换为"return"</span></span><br><span class="line">        $code = substr_replace($code, <span class="string">'return'</span>, $retOffset, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $code .= <span class="string">"        &#125;\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($hasTrailingSlash || $schemes || $methods) &#123;</span><br><span class="line">        $code .= <span class="string">"        $gotoname:\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>路由在不设置配置项controller的情况下，不会影响路由的缓存。Symfony在kernel.request事件分发完成后，会去解析请求对象attributes中的_controller值，如果未设置的话，会抛出NotFoundHttpException异常。</p></blockquote><p>UrlMatcher类的mergeDefaults函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeDefaults</span><span class="params">($params, $defaults)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($params <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        <span class="comment">// 过滤掉数字键值</span></span><br><span class="line">        <span class="keyword">if</span> (!\is_int($key)) &#123;</span><br><span class="line">            $defaults[$key] = $value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $defaults;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Matcher\UrlMatcher.php</p></blockquote><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要讲解Symfony3.4如何缓存路由。&lt;/p&gt;
&lt;p&gt;上一篇文章提到匹配请求的匹配器实际是缓存路由后生成的PHP文件，而PHP文件中的代码主要由PhpMatcherDumper类中dump函数生成，这也是本篇文章分析的重点。&lt;/p&gt;
&lt;p&gt;PhpMatcherDum
      
    
    </summary>
    
      <category term="symfony" scheme="https://www.pangpang.fun/categories/symfony/"/>
    
    
      <category term="php" scheme="https://www.pangpang.fun/tags/php/"/>
    
      <category term="symfony" scheme="https://www.pangpang.fun/tags/symfony/"/>
    
      <category term="路由" scheme="https://www.pangpang.fun/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Symfony路由机制-二</title>
    <link href="https://www.pangpang.fun/2018/08/12/symfony-routing-2/"/>
    <id>https://www.pangpang.fun/2018/08/12/symfony-routing-2/</id>
    <published>2018-08-12T07:54:23.000Z</published>
    <updated>2019-11-16T13:10:31.348Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲解Symfony3.4加载路由配置文件并将它解析为RouteCollection对象。</p><h2 id="订阅事件"><a href="#订阅事件" class="headerlink" title="订阅事件"></a>订阅事件</h2><p>router_listener服务通过配置kernel.event_subscriber标签来订阅事件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">id</span>=<span class="string">"router_listener"</span> <span class="attr">class</span>=<span class="string">"Symfony\Component\HttpKernel\EventListener\RouterListener"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span> <span class="attr">name</span>=<span class="string">"kernel.event_subscriber"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span> <span class="attr">name</span>=<span class="string">"monolog.logger"</span> <span class="attr">channel</span>=<span class="string">"request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span> <span class="attr">type</span>=<span class="string">"service"</span> <span class="attr">id</span>=<span class="string">"router"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span> <span class="attr">type</span>=<span class="string">"service"</span> <span class="attr">id</span>=<span class="string">"request_stack"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span> <span class="attr">type</span>=<span class="string">"service"</span> <span class="attr">id</span>=<span class="string">"router.request_context"</span> <span class="attr">on-invalid</span>=<span class="string">"ignore"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span> <span class="attr">type</span>=<span class="string">"service"</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">on-invalid</span>=<span class="string">"ignore"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>%kernel.project_dir%<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>%kernel.debug%<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面简单介绍每个节点的含义：</p><ul><li>第一个tag节点表示事件订阅。</li><li>第二个tag节点表示日志级别。</li><li>其余argument节点表示服务实例化时所需的参数。</li></ul><p>详细分析会在<strong>依赖注入组件</strong>的文章中。</p><blockquote><p>\vendor\symfony\symfony\src\Symfony\Bundle\FrameworkBundle\Resources\config\routing.xml</p></blockquote><h2 id="容器编译"><a href="#容器编译" class="headerlink" title="容器编译"></a>容器编译</h2><p>在容器编译的过程中，会调用所有Bundle的DependencyInjection\Compiler目录下以Pass结尾的类中的process函数，其中不同类具有不同的职责。RegisterListenersPass.php负责事件订阅部分，它的process函数会获取所有配置了kernel.event_listener和kernel.event_subscriber标签的服务，具有kernel.event_subscriber标签的服务会调用该服务的getSubscribedEvents方法获取服务订阅的事件。</p><blockquote><p><strong>注意：</strong>自定义服务，这里指事件订阅器，在配置了kernel.event_subscriber标签的情况下，必须实现EventSubscriberInterface接口的getSubscribedEvents方法。</p></blockquote><p>RegisterListenersPass类的process函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">(ContainerBuilder $container)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 检查是否有事件分发服务，即event_dispatcher服务</span></span><br><span class="line">    <span class="keyword">if</span> (!$container-&gt;hasDefinition(<span class="keyword">$this</span>-&gt;dispatcherService) &amp;&amp; !$container-&gt;hasAlias(<span class="keyword">$this</span>-&gt;dispatcherService)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取事件分发服务</span></span><br><span class="line">    $definition = $container-&gt;findDefinition(<span class="keyword">$this</span>-&gt;dispatcherService);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到配置kernel.event_listener标签的所有服务</span></span><br><span class="line">    <span class="keyword">foreach</span> ($container-&gt;findTaggedServiceIds(<span class="keyword">$this</span>-&gt;listenerTag, <span class="keyword">true</span>) <span class="keyword">as</span> $id =&gt; $events) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($events <span class="keyword">as</span> $event) &#123;</span><br><span class="line">            <span class="comment">// 优先级属性（可选），默认值为0</span></span><br><span class="line">            $priority = <span class="keyword">isset</span>($event[<span class="string">'priority'</span>]) ? $event[<span class="string">'priority'</span>] : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 事件属性（必选），表示订阅的事件</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>($event[<span class="string">'event'</span>])) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(sprintf(<span class="string">'Service "%s" must define the "event" attribute on "%s" tags.'</span>, $id, <span class="keyword">$this</span>-&gt;listenerTag));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 方法属性（可选），回调函数，对于kernel.request事件，默认值为onKernelRequest</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>($event[<span class="string">'method'</span>])) &#123;</span><br><span class="line">                <span class="comment">// 单词首字母大写</span></span><br><span class="line">                $event[<span class="string">'method'</span>] = <span class="string">'on'</span>.preg_replace_callback(<span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">'/(?&lt;=\b)[a-z]/i'</span>,          <span class="comment">// 匹配单词的首字母</span></span><br><span class="line">                    <span class="string">'/[^a-z0-9]/i'</span>,             <span class="comment">// 匹配字符串中除字母和数字之外的字符 </span></span><br><span class="line">                ), <span class="function"><span class="keyword">function</span> <span class="params">($matches)</span> </span>&#123; <span class="keyword">return</span> strtoupper($matches[<span class="number">0</span>]); &#125;, $event[<span class="string">'event'</span>]);</span><br><span class="line">                <span class="comment">// 替换字符串中非字母和数字的字符为空</span></span><br><span class="line">                $event[<span class="string">'method'</span>] = preg_replace(<span class="string">'/[^a-z0-9]/i'</span>, <span class="string">''</span>, $event[<span class="string">'method'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 事件分发服务添加回调函数</span></span><br><span class="line">            $definition-&gt;addMethodCall(<span class="string">'addListener'</span>, <span class="keyword">array</span>($event[<span class="string">'event'</span>], <span class="keyword">array</span>(<span class="keyword">new</span> ServiceClosureArgument(<span class="keyword">new</span> Reference($id)), $event[<span class="string">'method'</span>]), $priority));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// FrameworkBundle在build的时候添加了5个hotPathEvents，分别是kernel.request，</span></span><br><span class="line">            <span class="comment">// kernel.controller，kernel.controller_arguments，kernel_response，kernel.finish_request</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hotPathEvents[$event[<span class="string">'event'</span>]])) &#123;</span><br><span class="line">                <span class="comment">// 为服务添加container.hot_path标签，由ResolveHotPathPass.php的process函数处理</span></span><br><span class="line">                $container-&gt;getDefinition($id)-&gt;addTag(<span class="keyword">$this</span>-&gt;hotPathTagName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $extractingDispatcher = <span class="keyword">new</span> ExtractingEventDispatcher();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到配置kernel.event_subscriber标签的所有服务</span></span><br><span class="line">    <span class="keyword">foreach</span> ($container-&gt;findTaggedServiceIds(<span class="keyword">$this</span>-&gt;subscriberTag, <span class="keyword">true</span>) <span class="keyword">as</span> $id =&gt; $attributes) &#123;</span><br><span class="line">        <span class="comment">// 获取服务定义</span></span><br><span class="line">        $def = $container-&gt;getDefinition($id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类名</span></span><br><span class="line">        $class = $def-&gt;getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取反射类</span></span><br><span class="line">        <span class="keyword">if</span> (!$r = $container-&gt;getReflectionClass($class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(sprintf(<span class="string">'Class "%s" used for service "%s" cannot be found.'</span>, $class, $id));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 事件订阅器必须实现EventSubscriberInterface接口</span></span><br><span class="line">        <span class="keyword">if</span> (!$r-&gt;isSubclassOf(EventSubscriberInterface::class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(sprintf(<span class="string">'Service "%s" must implement interface "%s".'</span>, $id, EventSubscriberInterface::class));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取类名</span></span><br><span class="line">        $class = $r-&gt;name;</span><br><span class="line"></span><br><span class="line">        ExtractingEventDispatcher::$subscriber = $class;</span><br><span class="line">        <span class="comment">// 添加订阅者，调用getSubscribedEvents方法返回订阅的事件</span></span><br><span class="line">        $extractingDispatcher-&gt;addSubscriber($extractingDispatcher);</span><br><span class="line">        <span class="comment">// 遍历监听器</span></span><br><span class="line">        <span class="keyword">foreach</span> ($extractingDispatcher-&gt;listeners <span class="keyword">as</span> $args) &#123;</span><br><span class="line">            <span class="comment">// 和上面类似</span></span><br><span class="line">            $args[<span class="number">1</span>] = <span class="keyword">array</span>(<span class="keyword">new</span> ServiceClosureArgument(<span class="keyword">new</span> Reference($id)), $args[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 添加回调</span></span><br><span class="line">            $definition-&gt;addMethodCall(<span class="string">'addListener'</span>, $args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 和上面类似</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hotPathEvents[$args[<span class="number">0</span>]])) &#123;</span><br><span class="line">                $container-&gt;getDefinition($id)-&gt;addTag(<span class="string">'container.hot_path'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $extractingDispatcher-&gt;listeners = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>/(?&lt;=\b)[a-z]/i</strong>用到了正则表达式中的<strong>零宽断言</strong>，可以参考这篇教程：<a href="https://deerchao.net/tutorials/regex/regex.htm" title="正则表达式30分钟入门教程" target="_blank" rel="noopener">正则表达式30分钟入门教程</a>。</p><p>\vendor\symfony\symfony\src\Symfony\Component\EventDispatcher\DependencyInjection\RegisterListenersPass.php</p></blockquote><p>RouterListener类的getSubscribedEvents函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getSubscribedEvents</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">        KernelEvents::REQUEST =&gt; <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">'onKernelRequest'</span>, <span class="number">32</span>)),</span><br><span class="line">        KernelEvents::FINISH_REQUEST =&gt; <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">'onKernelFinishRequest'</span>, <span class="number">0</span>)),</span><br><span class="line">        KernelEvents::EXCEPTION =&gt; <span class="keyword">array</span>(<span class="string">'onKernelException'</span>, <span class="number">-64</span>),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，router_listener服务通过getSubscribedEvents函数订阅了kernel.request、kernel.finish_request、kernel.exception这3个事件。也就是说,配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span> <span class="attr">name</span>=<span class="string">"kernel.event_subscriber"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>与配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span> <span class="attr">name</span>=<span class="string">"kernel.event_listener"</span> <span class="attr">priority</span>=<span class="string">"32"</span> <span class="attr">event</span>=<span class="string">"kernel.request"</span> <span class="attr">method</span>=<span class="string">"onKernelRequest"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span> <span class="attr">name</span>=<span class="string">"kernel.event_listener"</span> <span class="attr">event</span>=<span class="string">"kernel.finish_request"</span> <span class="attr">method</span>=<span class="string">"onKernelFinishRequest"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag</span> <span class="attr">name</span>=<span class="string">"kernel.event_listener"</span> <span class="attr">priority</span>=<span class="string">"-64"</span> <span class="attr">event</span>=<span class="string">"kernel.exception"</span> <span class="attr">method</span>=<span class="string">"onKernelException"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>效果一样，可见kernel.event_subscriber配置方法比kernel.event_listener灵活的多。</p><p>详细分析会在之后<strong>事件分发组件</strong>的文章中。</p><blockquote><p>服务订阅事件可以配置kernel.event_listener标签和kernel.event_subscriber标签，只需要定义一个标签即可。</p><blockquote><p><strong>注意：</strong>当两个标签配置同一个事件的时候，后者并不会覆盖前者，会在事件分发的时候，执行两遍。</p></blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\RouterListener.php</p></blockquote><h2 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h2><p>Symfony3.4在处理请求时，会分发kernel.request事件。在分发过程中，router_listener服务会调用回调函数onKernelRequest。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$event = <span class="keyword">new</span> GetResponseEvent(<span class="keyword">$this</span>, $request, $type);</span><br><span class="line"><span class="comment">// 分发kernel.request事件</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;dispatcher-&gt;dispatch(KernelEvents::REQUEST, $event);</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\HttpKernel.php</p></blockquote><p>RouterListener类的onKernelRequest函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onKernelRequest</span><span class="params">(GetResponseEvent $event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取请求对象</span></span><br><span class="line">    $request = $event-&gt;getRequest();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前请求</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;setCurrentRequest($request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($request-&gt;attributes-&gt;has(<span class="string">'_controller'</span>)) &#123;</span><br><span class="line">        <span class="comment">// 路由匹配已经完成。如果一个事件订阅两次，这里会提前返回，避免无效工作</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用匹配器来匹配请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;matcher <span class="keyword">instanceof</span> RequestMatcherInterface) &#123;</span><br><span class="line">            $parameters = <span class="keyword">$this</span>-&gt;matcher-&gt;matchRequest($request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $parameters = <span class="keyword">$this</span>-&gt;matcher-&gt;match($request-&gt;getPathInfo());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">$this</span>-&gt;logger) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;logger-&gt;info(<span class="string">'Matched route "&#123;route&#125;".'</span>, <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'route'</span> =&gt; <span class="keyword">isset</span>($parameters[<span class="string">'_route'</span>]) ? $parameters[<span class="string">'_route'</span>] : <span class="string">'n/a'</span>,</span><br><span class="line">                <span class="string">'route_parameters'</span> =&gt; $parameters,</span><br><span class="line">                <span class="string">'request_uri'</span> =&gt; $request-&gt;getUri(),</span><br><span class="line">                <span class="string">'method'</span> =&gt; $request-&gt;getMethod(),</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数添加到请求对象中</span></span><br><span class="line">        $request-&gt;attributes-&gt;add($parameters);</span><br><span class="line">        <span class="keyword">unset</span>($parameters[<span class="string">'_route'</span>], $parameters[<span class="string">'_controller'</span>]);</span><br><span class="line">        <span class="comment">// 请求对象设置路由参数</span></span><br><span class="line">        $request-&gt;attributes-&gt;set(<span class="string">'_route_params'</span>, $parameters);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ResourceNotFoundException $e) &#123;</span><br><span class="line">        $message = sprintf(<span class="string">'No route found for "%s %s"'</span>, $request-&gt;getMethod(), $request-&gt;getPathInfo());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($referer = $request-&gt;headers-&gt;get(<span class="string">'referer'</span>)) &#123;</span><br><span class="line">            $message .= sprintf(<span class="string">' (from "%s")'</span>, $referer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundHttpException($message, $e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MethodNotAllowedException $e) &#123;</span><br><span class="line">        $message = sprintf(<span class="string">'No route found for "%s %s": Method Not Allowed (Allow: %s)'</span>, $request-&gt;getMethod(), $request-&gt;getPathInfo(), implode(<span class="string">', '</span>, $e-&gt;getAllowedMethods()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MethodNotAllowedHttpException($e-&gt;getAllowedMethods(), $message, $e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\RouterListener.php</p></blockquote><h2 id="匹配请求"><a href="#匹配请求" class="headerlink" title="匹配请求"></a>匹配请求</h2><p>Router类的matchRequest函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">matchRequest</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 通过缓存路由后得到的匹配器，才是真正用于匹配请求的匹配器</span></span><br><span class="line">    $matcher = <span class="keyword">$this</span>-&gt;getMatcher();</span><br><span class="line">    <span class="keyword">if</span> (!$matcher <span class="keyword">instanceof</span> RequestMatcherInterface) &#123;</span><br><span class="line">        <span class="comment">// fallback to the default UrlMatcherInterface</span></span><br><span class="line">        <span class="keyword">return</span> $matcher-&gt;match($request-&gt;getPathInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匹配请求</span></span><br><span class="line">    <span class="keyword">return</span> $matcher-&gt;matchRequest($request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数获取真正匹配请求的匹配器。</p><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Router.php</p></blockquote><h2 id="匹配器"><a href="#匹配器" class="headerlink" title="匹配器"></a>匹配器</h2><p>Router类的getMatcher函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMatcher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">$this</span>-&gt;matcher) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;matcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> === <span class="keyword">$this</span>-&gt;options[<span class="string">'cache_dir'</span>] || <span class="keyword">null</span> === <span class="keyword">$this</span>-&gt;options[<span class="string">'matcher_cache_class'</span>]) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;matcher = <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;options[<span class="string">'matcher_class'</span>](<span class="keyword">$this</span>-&gt;getRouteCollection(), <span class="keyword">$this</span>-&gt;context);</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>-&gt;matcher, <span class="string">'addExpressionLanguageProvider'</span>)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;expressionLanguageProviders <span class="keyword">as</span> $provider) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;matcher-&gt;addExpressionLanguageProvider($provider);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;matcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $cache = <span class="keyword">$this</span>-&gt;getConfigCacheFactory()-&gt;cache(<span class="keyword">$this</span>-&gt;options[<span class="string">'cache_dir'</span>].<span class="string">'/'</span>.<span class="keyword">$this</span>-&gt;options[<span class="string">'matcher_cache_class'</span>].<span class="string">'.php'</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="params">(ConfigCacheInterface $cache)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 获取匹配器Dumper实例</span></span><br><span class="line">            $dumper = <span class="keyword">$this</span>-&gt;getMatcherDumperInstance();</span><br><span class="line">            <span class="keyword">if</span> (method_exists($dumper, <span class="string">'addExpressionLanguageProvider'</span>)) &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;expressionLanguageProviders <span class="keyword">as</span> $provider) &#123;</span><br><span class="line">                    $dumper-&gt;addExpressionLanguageProvider($provider);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $options = <span class="keyword">array</span>(</span><br><span class="line">                <span class="comment">// 匹配器类名</span></span><br><span class="line">                <span class="string">'class'</span> =&gt; <span class="keyword">$this</span>-&gt;options[<span class="string">'matcher_cache_class'</span>],</span><br><span class="line">                <span class="comment">// 匹配器父类名</span></span><br><span class="line">                <span class="string">'base_class'</span> =&gt; <span class="keyword">$this</span>-&gt;options[<span class="string">'matcher_base_class'</span>],</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 缓存路由</span></span><br><span class="line">            $cache-&gt;write($dumper-&gt;dump($options), <span class="keyword">$this</span>-&gt;getRouteCollection()-&gt;getResources());</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!class_exists(<span class="keyword">$this</span>-&gt;options[<span class="string">'matcher_cache_class'</span>], <span class="keyword">false</span>)) &#123;</span><br><span class="line">        <span class="keyword">require_once</span> $cache-&gt;getPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 真正匹配器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;matcher = <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;options[<span class="string">'matcher_cache_class'</span>](<span class="keyword">$this</span>-&gt;context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Router.php</p></blockquote><h2 id="匹配器Dumper"><a href="#匹配器Dumper" class="headerlink" title="匹配器Dumper"></a>匹配器Dumper</h2><p>Router类的getMatcherDumperInstance函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getMatcherDumperInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;options[<span class="string">'matcher_dumper_class'</span>](<span class="keyword">$this</span>-&gt;getRouteCollection());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>matcher_dumper_class：Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper</p><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Router.php</p></blockquote><p>该函数使用解析路由配置获得的RouteCollection对象实例化PhpMatcherDumper类。见下面配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parameters</span>&gt;</span>PhpMatcherDumper</span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.options.generator_class"</span>&gt;</span>Symfony\Component\Routing\Generator\UrlGenerator<span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.options.generator_base_class"</span>&gt;</span>Symfony\Component\Routing\Generator\UrlGenerator<span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.options.generator_dumper_class"</span>&gt;</span>Symfony\Component\Routing\Generator\Dumper\PhpGeneratorDumper<span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.options.matcher_class"</span>&gt;</span>Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher<span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.options.matcher_base_class"</span>&gt;</span>Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher<span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.options.matcher_dumper_class"</span>&gt;</span>Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper<span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.options.matcher.cache_class"</span>&gt;</span>%router.cache_class_prefix%UrlMatcher<span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.options.generator.cache_class"</span>&gt;</span>%router.cache_class_prefix%UrlGenerator<span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.request_context.host"</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.request_context.scheme"</span>&gt;</span>http<span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">key</span>=<span class="string">"router.request_context.base_url"</span>&gt;</span><span class="tag">&lt;/<span class="name">parameter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parameters</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Bundle\FrameworkBundle\Resources\config\routing.xml</p></blockquote><h2 id="路由集合"><a href="#路由集合" class="headerlink" title="路由集合"></a>路由集合</h2><p>Router类的getRouteCollection函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRouteCollection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> === <span class="keyword">$this</span>-&gt;collection) &#123;</span><br><span class="line">        <span class="comment">// 调用routing.loader服务加载路由资源</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;collection = <span class="keyword">$this</span>-&gt;container-&gt;get(<span class="string">'routing.loader'</span>)-&gt;load(<span class="keyword">$this</span>-&gt;resource, <span class="keyword">$this</span>-&gt;options[<span class="string">'resource_type'</span>]);</span><br><span class="line">        <span class="comment">// 解析参数，解析配置中%包围的参数</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;resolveParameters(<span class="keyword">$this</span>-&gt;collection);</span><br><span class="line">        <span class="comment">// 添加资源</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;collection-&gt;addResource(<span class="keyword">new</span> ContainerParametersResource(<span class="keyword">$this</span>-&gt;collectedParameters));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;collection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Bundle\FrameworkBundle\Routing\Router.php</p></blockquote><p>$this-&gt;resource即routing_dev.yml。见下面配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework:</span></span><br><span class="line">    <span class="attr">router:</span></span><br><span class="line">        <span class="attr">resource:</span> <span class="string">'%kernel.project_dir%/app/config/routing_dev.yml'</span></span><br><span class="line">        <span class="attr">strict_requirements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">profiler:</span> <span class="string">&#123;</span> <span class="attr">only_exceptions:</span> <span class="literal">false</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>\app\config\config_dev.yml</p></blockquote><h2 id="router-loader服务"><a href="#router-loader服务" class="headerlink" title="router.loader服务"></a>router.loader服务</h2><p>router.loader服务会在容器编译过程中生成文件getRouting_LoaderService.php。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;</span><br><span class="line"></span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Config\\Loader\\LoaderInterface.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Config\\Loader\\Loader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Config\\Loader\\FileLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Routing\\Loader\\XmlFileLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Routing\\Loader\\YamlFileLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Routing\\Loader\\PhpFileLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Routing\\Loader\\GlobFileLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Routing\\Loader\\DirectoryLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Routing\\Loader\\ObjectRouteLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Routing\\Loader\\DependencyInjection\\ServiceRouterLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Routing\\Loader\\AnnotationClassLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle\\Routing\\AnnotatedRouteControllerLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Config\\Loader\\LoaderResolverInterface.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Config\\Loader\\LoaderResolver.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Config\\Loader\\DelegatingLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle\\Routing\\DelegatingLoader.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Config\\FileLocatorInterface.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Config\\FileLocator.php&apos;;</span><br><span class="line">include_once $this-&gt;targetDirs[3].&apos;\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\HttpKernel\\Config\\FileLocator.php&apos;;</span><br><span class="line"></span><br><span class="line">// file_locator服务实例化</span><br><span class="line">$a = $&#123;($_ = isset($this-&gt;services[&apos;file_locator&apos;]) ? $this-&gt;services[&apos;file_locator&apos;] : $this-&gt;services[&apos;file_locator&apos;] = new \Symfony\Component\HttpKernel\Config\FileLocator($&#123;($_ = isset($this-&gt;services[&apos;kernel&apos;]) ? $this-&gt;services[&apos;kernel&apos;] : $this-&gt;get(&apos;kernel&apos;, 1)) &amp;&amp; false ?: &apos;_&apos;&#125;, ($this-&gt;targetDirs[3].&apos;\\app/Resources&apos;), array(0 =&gt; ($this-&gt;targetDirs[3].&apos;\\app&apos;)))) &amp;&amp; false ?: &apos;_&apos;&#125;;</span><br><span class="line">// annotation_reader服务实例化</span><br><span class="line">$b = $&#123;($_ = isset($this-&gt;services[&apos;annotation_reader&apos;]) ? $this-&gt;services[&apos;annotation_reader&apos;] : $this-&gt;getAnnotationReaderService()) &amp;&amp; false ?: &apos;_&apos;&#125;;</span><br><span class="line"></span><br><span class="line">$c = new \Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader($b);</span><br><span class="line"></span><br><span class="line">// 加载器解析器</span><br><span class="line">$d = new \Symfony\Component\Config\Loader\LoaderResolver();</span><br><span class="line">// xml文件加载器</span><br><span class="line">$d-&gt;addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($a));</span><br><span class="line">// yaml文件加载器</span><br><span class="line">$d-&gt;addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($a));</span><br><span class="line">// php文件加载器</span><br><span class="line">$d-&gt;addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($a));</span><br><span class="line">// glob文件加载器</span><br><span class="line">$d-&gt;addLoader(new \Symfony\Component\Routing\Loader\GlobFileLoader($a));</span><br><span class="line">// 目录加载器</span><br><span class="line">$d-&gt;addLoader(new \Symfony\Component\Routing\Loader\DirectoryLoader($a));</span><br><span class="line">$d-&gt;addLoader(new \Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader($this));</span><br><span class="line">$d-&gt;addLoader($c);</span><br><span class="line">// annotation目录加载器</span><br><span class="line">$d-&gt;addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($a, $c));</span><br><span class="line">// annotation文件加载器</span><br><span class="line">$d-&gt;addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($a, $c));</span><br><span class="line"></span><br><span class="line">return $this-&gt;services[&apos;routing.loader&apos;] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($&#123;($_ = isset($this-&gt;services[&apos;controller_name_converter&apos;]) ? $this-&gt;services[&apos;controller_name_converter&apos;] : $this-&gt;services[&apos;controller_name_converter&apos;] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser($&#123;($_ = isset($this-&gt;services[&apos;kernel&apos;]) ? $this-&gt;services[&apos;kernel&apos;] : $this-&gt;get(&apos;kernel&apos;, 1)) &amp;&amp; false ?: &apos;_&apos;&#125;)) &amp;&amp; false ?: &apos;_&apos;&#125;, $d);</span><br></pre></td></tr></table></figure><p>routing.loader即DelegatingLoader，DelegatingLoader字面意思为<strong>委托加载器</strong>，它不具有加载资源的功能，但会利用LoaderResolver来获取加载资源的加载器。routing.loader实例化过程中LoaderResolver会添加9种加载器，因此Symfony3.4支持多种格式的路由配置，比如yaml、xml、php、annotation。</p><blockquote><p><strong>注意：</strong>有些加载器实例化的时候需要file_locator服务，这个服务会定位资源的位置。</p></blockquote><h2 id="加载路由资源"><a href="#加载路由资源" class="headerlink" title="加载路由资源"></a>加载路由资源</h2><p>DelegatingLoader类的load函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($resource, $type = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;loading) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FileLoaderLoadException($resource, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, $type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 资源正在加载</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;loading = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用父类load函数</span></span><br><span class="line">        $collection = <span class="keyword">parent</span>::load($resource, $type);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;loading = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($collection-&gt;all() <span class="keyword">as</span> $route) &#123;</span><br><span class="line">        <span class="comment">// 不解析无效的值</span></span><br><span class="line">        <span class="keyword">if</span> (!\is_string($controller = $route-&gt;getDefault(<span class="string">'_controller'</span>)) || !$controller) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析控制器，EmployeesBundle:Default:employees将被解析为EmployeesBundle\Controller\DefaultController::employeesAction</span></span><br><span class="line">            $controller = <span class="keyword">$this</span>-&gt;parser-&gt;parse($controller);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\InvalidArgumentException $e) &#123;</span><br><span class="line">            <span class="comment">// 注意这里当controller的值不合理时，Symfony虽然会抛出异常，但没处理</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换为完整的控制器</span></span><br><span class="line">        $route-&gt;setDefault(<span class="string">'_controller'</span>, $controller);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $collection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader.php</p></blockquote><p>DelegatingLoader类的load函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($resource, $type = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 调用LoaderResolver解析资源，确定加载器</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span> === $loader = <span class="keyword">$this</span>-&gt;resolver-&gt;resolve($resource, $type)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FileLoaderLoadException($resource, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, $type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载资源</span></span><br><span class="line">    <span class="keyword">return</span> $loader-&gt;load($resource, $type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Config\Loader\DelegatingLoader.php</p></blockquote><p>LoaderResolver类的resolve函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">resolve</span><span class="params">($resource, $type = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;loaders <span class="keyword">as</span> $loader) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($loader-&gt;supports($resource, $type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $loader;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoaderResolver会遍历9种加载器，通过调用supports方法来判断将会使用的加载器。</p><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Config\Loader\LoaderResolver.php</p></blockquote><p>比如YamlFileLoader类的supports函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">supports</span><span class="params">($resource, $type = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> \is_string($resource) &amp;&amp; \in_array(pathinfo($resource, PATHINFO_EXTENSION), <span class="keyword">array</span>(<span class="string">'yml'</span>, <span class="string">'yaml'</span>), <span class="keyword">true</span>) &amp;&amp; (!$type || <span class="string">'yaml'</span> === $type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Loader\YamlFileLoader.php</p></blockquote><p>routing_dev.yml配置如下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">_wdt:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">'@WebProfilerBundle/Resources/config/routing/wdt.xml'</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">/_wdt</span></span><br><span class="line"></span><br><span class="line"><span class="attr">_profiler:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">'@WebProfilerBundle/Resources/config/routing/profiler.xml'</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">/_profiler</span></span><br><span class="line"></span><br><span class="line"><span class="attr">_errors:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">'@TwigBundle/Resources/config/routing/errors.xml'</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">/_error</span></span><br><span class="line"></span><br><span class="line"><span class="attr">_main:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">routing.yml</span></span><br></pre></td></tr></table></figure><p>routing.yml一般为主路由配置，Symfony3.4通过加载它去加载自定义Bundle中的路由资源。FileLocator会在以下3个路径中寻找routing.yml文件。</p><ol><li>routing_dev.yml所在目录，一般为\app\config</li><li>\app\Resources（全局资源存放位置）</li><li>\app（前面都找不到的话，在这个目录下找）</li></ol><blockquote><p><strong>注意：</strong>按顺序解析，只会解析一个。</p><p>\app\config\routing_dev.yml</p></blockquote><p>上面路径的配置见下面。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">id</span>=<span class="string">"file_locator"</span> <span class="attr">class</span>=<span class="string">"Symfony\Component\HttpKernel\Config\FileLocator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span> <span class="attr">type</span>=<span class="string">"service"</span> <span class="attr">id</span>=<span class="string">"kernel"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>%kernel.root_dir%/Resources<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span> <span class="attr">type</span>=<span class="string">"collection"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">argument</span>&gt;</span>%kernel.root_dir%<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">id</span>=<span class="string">"Symfony\Component\HttpKernel\Config\FileLocator"</span> <span class="attr">alias</span>=<span class="string">"file_locator"</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Bundle\FrameworkBundle\Resources\config\services.xml</p></blockquote><p>这里只分析Yaml文件加载器，其余加载器类似。YamlFileLoader类的load函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">($file, $type = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定位器检查文件是否存在，将别名地址（以@开头）转换为绝对地址，在路径中寻找相对地址</span></span><br><span class="line">    $path = <span class="keyword">$this</span>-&gt;locator-&gt;locate($file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须为本地文件</span></span><br><span class="line">    <span class="keyword">if</span> (!stream_is_local($path)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(<span class="string">'This is not a local file "%s".'</span>, $path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!file_exists($path)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(<span class="string">'File "%s" not found.'</span>, $path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> === <span class="keyword">$this</span>-&gt;yamlParser) &#123;</span><br><span class="line">        <span class="comment">// Yaml解析器</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;yamlParser = <span class="keyword">new</span> YamlParser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置自定义错误处理函数，解析yaml文件出错时会用到这个错误处理函数</span></span><br><span class="line">    $prevErrorHandler = set_error_handler(<span class="function"><span class="keyword">function</span> <span class="params">($level, $message, $script, $line)</span> <span class="title">use</span> <span class="params">($file, &amp;$prevErrorHandler)</span> </span>&#123;</span><br><span class="line">        $message = E_USER_DEPRECATED === $level ? preg_replace(<span class="string">'/ on line \d+/'</span>, <span class="string">' in "'</span>.$file.<span class="string">'"$0'</span>, $message) : $message;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $prevErrorHandler ? $prevErrorHandler($level, $message, $script, $line) : <span class="keyword">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 解析yaml文件，返回PHP数组</span></span><br><span class="line">        $parsedConfig = <span class="keyword">$this</span>-&gt;yamlParser-&gt;parseFile($path);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(<span class="string">'The file "%s" does not contain valid YAML.'</span>, $path), <span class="number">0</span>, $e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 还原错误处理函数</span></span><br><span class="line">        restore_error_handler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化RouteCollection类</span></span><br><span class="line">    $collection = <span class="keyword">new</span> RouteCollection();</span><br><span class="line">    <span class="comment">// 添加资源</span></span><br><span class="line">    $collection-&gt;addResource(<span class="keyword">new</span> FileResource($path));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// yaml文件为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> === $parsedConfig) &#123;</span><br><span class="line">        <span class="keyword">return</span> $collection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非数组</span></span><br><span class="line">    <span class="keyword">if</span> (!\is_array($parsedConfig)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(<span class="string">'The file "%s" must contain a YAML array.'</span>, $path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($parsedConfig <span class="keyword">as</span> $name =&gt; $config) &#123;</span><br><span class="line">        <span class="comment">// 验证路由配置是否合法</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;validate($config, $name, $path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'resource'</span>])) &#123;</span><br><span class="line">            <span class="comment">// 解析导入</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseImport($collection, $config, $path, $file);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 解析路由</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseRoute($collection, $name, $config, $path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $collection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Loader\YamlFileLoader.php</p></blockquote><p>YamlFileLoader类中有个私有静态属性$availableKeys，定义了路由配置的所有选项。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> $availableKeys = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'resource'</span>, <span class="string">'type'</span>, <span class="string">'prefix'</span>, <span class="string">'path'</span>, <span class="string">'host'</span>, <span class="string">'schemes'</span>, <span class="string">'methods'</span>, </span><br><span class="line">    <span class="string">'defaults'</span>, <span class="string">'requirements'</span>, <span class="string">'options'</span>, <span class="string">'condition'</span>, <span class="string">'controller'</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Loader\YamlFileLoader.php</p></blockquote><p>配置项具体含义如下：</p><ul><li>resource：资源路径，相对地址或者绝对地址或者别名地址（以@开头）</li><li>type：类型，比如annotation、glob</li><li>prefix：前缀，与resource搭配使用</li><li>path：路由路径</li><li>host：主机，比如blog.pangpang.fun</li><li>schemes：表示URI schemes，常见的比如http、https</li><li>methods：请求类型，比如get、post</li><li>defaults：默认值，与path项搭配使用，其中_controller非常重要</li><li>requirements：一般为正则表达式</li><li>options：选项，比如{‘utf8’: true}表示支持utf8</li><li>condition：条件，使用<a href="https://symfony.com/doc/3.4/components/expression_language/syntax.html" title="The Expression Syntax" target="_blank" rel="noopener"><strong>The Expression Syntax</strong></a></li><li>controller：映射的控制器，比如EmployeesBundle:Default:employees</li></ul><blockquote><p><strong>注意：</strong>schemes表示URI schemes，具体见<a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Generic_syntax" title="URI" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Generic_syntax</a>。常见schemes有：http、https、ftp、mailto，对于web应用来说，scheme一般表示http和https。</p></blockquote><p>validate函数用来验证路由配置是否合法，可以看到路由配置需要遵守的约定。YamlFileLoader类的validate函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">($config, $name, $path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 配置必须为数组 </span></span><br><span class="line">    <span class="keyword">if</span> (!\is_array($config)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(<span class="string">'The definition of "%s" in "%s" must be a YAML array.'</span>, $name, $path));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置项必须在$availableKeys数组中</span></span><br><span class="line">    <span class="keyword">if</span> ($extraKeys = array_diff(array_keys($config), <span class="keyword">self</span>::$availableKeys)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(</span><br><span class="line">            <span class="string">'The routing file "%s" contains unsupported keys for "%s": "%s". Expected one of: "%s".'</span>,</span><br><span class="line">            $path, $name, implode(<span class="string">'", "'</span>, $extraKeys), implode(<span class="string">'", "'</span>, <span class="keyword">self</span>::$availableKeys)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置项resource和path不能同时出现</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'resource'</span>]) &amp;&amp; <span class="keyword">isset</span>($config[<span class="string">'path'</span>])) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(</span><br><span class="line">            <span class="string">'The routing file "%s" must not specify both the "resource" key and the "path" key for "%s". Choose between an import and a route definition.'</span>,</span><br><span class="line">            $path, $name</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置项type必须与resource同时出现</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($config[<span class="string">'resource'</span>]) &amp;&amp; <span class="keyword">isset</span>($config[<span class="string">'type'</span>])) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(</span><br><span class="line">            <span class="string">'The "type" key for the route definition "%s" in "%s" is unsupported. It is only available for imports in combination with the "resource" key.'</span>,</span><br><span class="line">            $name, $path</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置项resource和path至少出现一个</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($config[<span class="string">'resource'</span>]) &amp;&amp; !<span class="keyword">isset</span>($config[<span class="string">'path'</span>])) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(</span><br><span class="line">            <span class="string">'You must define a "path" for the route "%s" in file "%s".'</span>,</span><br><span class="line">            $name, $path</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置项controller和defaults中的_controller不能同时出现</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'controller'</span>]) &amp;&amp; <span class="keyword">isset</span>($config[<span class="string">'defaults'</span>][<span class="string">'_controller'</span>])) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(<span class="string">'The routing file "%s" must not specify both the "controller" key and the defaults key "_controller" for "%s".'</span>, $path, $name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Loader\YamlFileLoader.php</p></blockquote><p>YamlFileLoader类的parseRoute函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseRoute</span><span class="params">(RouteCollection $collection, $name, array $config, $path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取各个配置项的值，没设置的话，设置默认值</span></span><br><span class="line">    $defaults = <span class="keyword">isset</span>($config[<span class="string">'defaults'</span>]) ? $config[<span class="string">'defaults'</span>] : <span class="keyword">array</span>();</span><br><span class="line">    $requirements = <span class="keyword">isset</span>($config[<span class="string">'requirements'</span>]) ? $config[<span class="string">'requirements'</span>] : <span class="keyword">array</span>();</span><br><span class="line">    $options = <span class="keyword">isset</span>($config[<span class="string">'options'</span>]) ? $config[<span class="string">'options'</span>] : <span class="keyword">array</span>();</span><br><span class="line">    $host = <span class="keyword">isset</span>($config[<span class="string">'host'</span>]) ? $config[<span class="string">'host'</span>] : <span class="string">''</span>;</span><br><span class="line">    $schemes = <span class="keyword">isset</span>($config[<span class="string">'schemes'</span>]) ? $config[<span class="string">'schemes'</span>] : <span class="keyword">array</span>();</span><br><span class="line">    $methods = <span class="keyword">isset</span>($config[<span class="string">'methods'</span>]) ? $config[<span class="string">'methods'</span>] : <span class="keyword">array</span>();</span><br><span class="line">    $condition = <span class="keyword">isset</span>($config[<span class="string">'condition'</span>]) ? $config[<span class="string">'condition'</span>] : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// controller配置项的值会保存到defaults配置项中的_controller</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'controller'</span>])) &#123;</span><br><span class="line">        $defaults[<span class="string">'_controller'</span>] = $config[<span class="string">'controller'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化路由</span></span><br><span class="line">    $route = <span class="keyword">new</span> Route($config[<span class="string">'path'</span>], $defaults, $requirements, $options, $host, $schemes, $methods, $condition);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加路由，重复定义的情况，会按先后顺序只保留后者</span></span><br><span class="line">    $collection-&gt;add($name, $route);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>在配置了path的情况下，path、defaults、requirements、options、host、schemes、methods、condition、controller这9个配置项有效。<br><strong>注意：</strong>实例化Route过程中，会为options添加默认值{‘compiler_class’: ‘Symfony\Component\Routing\RouteCompiler’}。</p><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Loader\YamlFileLoader.php</p></blockquote><p>YamlFileLoader类的parseImport函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseImport</span><span class="params">(RouteCollection $collection, array $config, $path, $file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取各个配置项的值，没设置的话，设置默认值</span></span><br><span class="line">    $type = <span class="keyword">isset</span>($config[<span class="string">'type'</span>]) ? $config[<span class="string">'type'</span>] : <span class="keyword">null</span>;</span><br><span class="line">    $prefix = <span class="keyword">isset</span>($config[<span class="string">'prefix'</span>]) ? $config[<span class="string">'prefix'</span>] : <span class="string">''</span>;</span><br><span class="line">    $defaults = <span class="keyword">isset</span>($config[<span class="string">'defaults'</span>]) ? $config[<span class="string">'defaults'</span>] : <span class="keyword">array</span>();</span><br><span class="line">    $requirements = <span class="keyword">isset</span>($config[<span class="string">'requirements'</span>]) ? $config[<span class="string">'requirements'</span>] : <span class="keyword">array</span>();</span><br><span class="line">    $options = <span class="keyword">isset</span>($config[<span class="string">'options'</span>]) ? $config[<span class="string">'options'</span>] : <span class="keyword">array</span>();</span><br><span class="line">    $host = <span class="keyword">isset</span>($config[<span class="string">'host'</span>]) ? $config[<span class="string">'host'</span>] : <span class="keyword">null</span>;</span><br><span class="line">    $condition = <span class="keyword">isset</span>($config[<span class="string">'condition'</span>]) ? $config[<span class="string">'condition'</span>] : <span class="keyword">null</span>;</span><br><span class="line">    $schemes = <span class="keyword">isset</span>($config[<span class="string">'schemes'</span>]) ? $config[<span class="string">'schemes'</span>] : <span class="keyword">null</span>;</span><br><span class="line">    $methods = <span class="keyword">isset</span>($config[<span class="string">'methods'</span>]) ? $config[<span class="string">'methods'</span>] : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同parseRoute函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'controller'</span>])) &#123;</span><br><span class="line">        $defaults[<span class="string">'_controller'</span>] = $config[<span class="string">'controller'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前目录，主要用于FileLocator中</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;setCurrentDir(\dirname($path));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导入路由资源，返回的是子路由集合</span></span><br><span class="line">    $imported = <span class="keyword">$this</span>-&gt;import($config[<span class="string">'resource'</span>], $type, <span class="keyword">false</span>, $file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!\is_array($imported)) &#123;</span><br><span class="line">        $imported = <span class="keyword">array</span>($imported);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($imported <span class="keyword">as</span> $subCollection) &#123;</span><br><span class="line">        <span class="comment">// 添加前缀，作用于path</span></span><br><span class="line">        $subCollection-&gt;addPrefix($prefix);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $host) &#123;</span><br><span class="line">            <span class="comment">// 设置主机，会覆盖$subCollection中的host</span></span><br><span class="line">            $subCollection-&gt;setHost($host);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $condition) &#123;</span><br><span class="line">            <span class="comment">// 设置条件，会覆盖$subCollection中的condition</span></span><br><span class="line">            $subCollection-&gt;setCondition($condition);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $schemes) &#123;</span><br><span class="line">            <span class="comment">// 设置协议，会覆盖$subCollection中的schemes</span></span><br><span class="line">            $subCollection-&gt;setSchemes($schemes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $methods) &#123;</span><br><span class="line">            <span class="comment">// 设置请求方法，会覆盖$subCollection中的methods</span></span><br><span class="line">            $subCollection-&gt;setMethods($methods);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加默认</span></span><br><span class="line">        $subCollection-&gt;addDefaults($defaults);</span><br><span class="line">        <span class="comment">// 添加条件</span></span><br><span class="line">        $subCollection-&gt;addRequirements($requirements);</span><br><span class="line">        <span class="comment">// 添加选项</span></span><br><span class="line">        $subCollection-&gt;addOptions($options);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加子集合</span></span><br><span class="line">        $collection-&gt;addCollection($subCollection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>在配置了resource的情况下，resource、type、prefix、defaults、requirements、options、host、condition、schemes、methods这10个配置项有效。</p><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\Loader\YamlFileLoader.php</p></blockquote><p>RouteCollection类的addPrefix函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addPrefix</span><span class="params">($prefix, array $defaults = array<span class="params">()</span>, array $requirements = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 去掉prefix首尾空格字符和/</span></span><br><span class="line">    $prefix = trim(trim($prefix), <span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为空直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">''</span> === $prefix) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;routes <span class="keyword">as</span> $route) &#123;</span><br><span class="line">        <span class="comment">// path前拼接prefix，重新设置path</span></span><br><span class="line">        $route-&gt;setPath(<span class="string">'/'</span>.$prefix.$route-&gt;getPath());</span><br><span class="line">        $route-&gt;addDefaults($defaults);</span><br><span class="line">        $route-&gt;addRequirements($requirements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Routing\RouteCollection.php</p></blockquote><p>这个函数比较简单，作用就是遍历集合中所有路由，在path前面添加前缀。RouteCollection类中并没有setPrefix函数，因此prefix需要配合resource配置项使用，为resource内所有路由添加前缀。<br>配置了resource的情况下，由于resource的配置非常灵活，这里需要调用父类的import函数确定具体的加载器并重复上面步骤。FileLoader类的import函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">import</span><span class="params">($resource, $type = null, $ignoreErrors = false, $sourceResource = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 通过正则匹配来判断是否使用glob函数，第一次看到strcspn函数的使用</span></span><br><span class="line">    <span class="keyword">if</span> (\is_string($resource) &amp;&amp; \strlen($resource) !== $i = strcspn($resource, <span class="string">'*?&#123;['</span>)) &#123;</span><br><span class="line">        $ret = <span class="keyword">array</span>();</span><br><span class="line">        <span class="comment">// 是否是子路径</span></span><br><span class="line">        $isSubpath = <span class="number">0</span> !== $i &amp;&amp; <span class="keyword">false</span> !== strpos(substr($resource, <span class="number">0</span>, $i), <span class="string">'/'</span>);</span><br><span class="line">        <span class="comment">// 这个函数就不分析了，主要是使用PHP系统函数glob函数获取符合条件的文件并返回</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;glob($resource, <span class="keyword">false</span>, $_, $ignoreErrors || !$isSubpath) <span class="keyword">as</span> $path =&gt; $info) &#123;</span><br><span class="line">            <span class="comment">// 导入文件</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> !== $res = <span class="keyword">$this</span>-&gt;doImport($path, $type, $ignoreErrors, $sourceResource)) &#123;</span><br><span class="line">                $ret[] = $res;</span><br><span class="line">            &#125;</span><br><span class="line">            $isSubpath = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($isSubpath) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">isset</span>($ret[<span class="number">1</span>]) ? $ret : (<span class="keyword">isset</span>($ret[<span class="number">0</span>]) ? $ret[<span class="number">0</span>] : <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;doImport($resource, $type, $ignoreErrors, $sourceResource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>\vendor\symfony\symfony\src\Symfony\Component\Config\Loader\FileLoader.php</p></blockquote><p>在什么情况下会使用到glob函数呢？看下面的例子。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是\app\config\routing.yml文件中的配置</span></span><br><span class="line"><span class="attr">app:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">'@AppBundle/Controller/'</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">annotation</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将会解析@EmployeesBundle/Resources/config/routing下所有yaml文件</span></span><br><span class="line"><span class="attr">employees:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">'@EmployeesBundle/Resources/config/routing/*.yml'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将会解析@EmployeesBundle/Resources/config/routing下所有yaml和xml文件</span></span><br><span class="line"><span class="attr">employees:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">'@EmployeesBundle/Resources/config/routing/*.&#123;yml,xml&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将会解析@EmployeesBundle/Resources/config/routing下ess.yml和rss.yml文件</span></span><br><span class="line"><span class="attr">employees:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">'@EmployeesBundle/Resources/config/routing/[er]ss.yml'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将会解析@EmployeesBundle/Resources/config/routing下ess.yml、eas.yml等文件</span></span><br><span class="line"><span class="comment"># 注意?与正则表达式中?含义不一样，这里的?表示除/以外的一个字符</span></span><br><span class="line"><span class="attr">employees:</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">'@EmployeesBundle/Resources/config/routing/e?s.yml'</span></span><br></pre></td></tr></table></figure><blockquote><p>glob模式匹配的规则可以看<a href="http://php.net/manual/zh/function.glob.php" title="glob" target="_blank" rel="noopener">glob函数</a>下的第一个用户评论。</p></blockquote><p>FileLoader类的doImport函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">doImport</span><span class="params">($resource, $type = null, $ignoreErrors = false, $sourceResource = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用LoaderResolver解析资源，结合type项的值确定具体使用的加载器，前面已经分析过</span></span><br><span class="line">        $loader = <span class="keyword">$this</span>-&gt;resolve($resource, $type);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($loader <span class="keyword">instanceof</span> <span class="keyword">self</span> &amp;&amp; <span class="keyword">null</span> !== <span class="keyword">$this</span>-&gt;currentDir) &#123;</span><br><span class="line">            <span class="comment">// 定位文件</span></span><br><span class="line">            $resource = $loader-&gt;getLocator()-&gt;locate($resource, <span class="keyword">$this</span>-&gt;currentDir, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $resources = \is_array($resource) ? $resource : <span class="keyword">array</span>($resource);</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $resourcesCount = \count($resources); ++$i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">self</span>::$loading[$resources[$i]])) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($i == $resourcesCount - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 循环导入异常</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> FileLoaderImportCircularReferenceException(array_keys(<span class="keyword">self</span>::$loading));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 当找到多个文件时，只解析第一个</span></span><br><span class="line">                $resource = $resources[$i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>::$loading[$resource] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载资源，重复上面步骤，返回RouteCollection</span></span><br><span class="line">            $ret = $loader-&gt;load($resource, $type);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">self</span>::$loading[$resource]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $ret;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileLoaderImportCircularReferenceException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> $e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!$ignoreErrors) &#123;</span><br><span class="line">            <span class="comment">// prevent embedded imports from nesting multiple exceptions</span></span><br><span class="line">            <span class="keyword">if</span> ($e <span class="keyword">instanceof</span> FileLoaderLoadException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> $e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileLoaderLoadException($resource, $sourceResource, <span class="keyword">null</span>, $e, $type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析控制器"><a href="#解析控制器" class="headerlink" title="解析控制器"></a>解析控制器</h2><p>返回看<a href="#加载路由资源">加载路由资源</a>，DelegatingLoader类的load函数在加载完路由配置后，需要进一步解析controller配置项，比如EmployeesBundle:Default:employees将被解析为EmployeesBundle\Controller\DefaultController::employeesAction。controller配置一般分为3个部分，Bundle、Controller和Action，使用:连接。ControllerNameParser类的parse函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span><span class="params">($controller)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 以:为分隔符分割字符串</span></span><br><span class="line">    $parts = explode(<span class="string">':'</span>, $controller);</span><br><span class="line">    <span class="comment">// controller需要定义三个部分，Bundle、Controller和Action</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">3</span> !== \count($parts) || \in_array(<span class="string">''</span>, $parts, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(sprintf(<span class="string">'The "%s" controller is not a valid "a:b:c" controller string.'</span>, $controller));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $originalController = $controller;</span><br><span class="line">    <span class="keyword">list</span>($bundle, $controller, $action) = $parts;</span><br><span class="line">    $controller = str_replace(<span class="string">'/'</span>, <span class="string">'\\'</span>, $controller);</span><br><span class="line">    $bundles = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取Bundle</span></span><br><span class="line">        $allBundles = <span class="keyword">$this</span>-&gt;kernel-&gt;getBundle($bundle, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\InvalidArgumentException $e) &#123;</span><br><span class="line">        $message = sprintf(</span><br><span class="line">            <span class="string">'The "%s" (from the _controller value "%s") does not exist or is not enabled in your kernel!'</span>,</span><br><span class="line">            $bundle,</span><br><span class="line">            $originalController</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($alternative = <span class="keyword">$this</span>-&gt;findAlternative($bundle)) &#123;</span><br><span class="line">            $message .= sprintf(<span class="string">' Did you mean "%s:%s:%s"?'</span>, $alternative, $controller, $action);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException($message, <span class="number">0</span>, $e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!\is_array($allBundles)) &#123;</span><br><span class="line">        <span class="comment">// happens when HttpKernel is version 4+</span></span><br><span class="line">        $allBundles = <span class="keyword">array</span>($allBundles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($allBundles <span class="keyword">as</span> $b) &#123;</span><br><span class="line">        <span class="comment">// 拼接出完整的控制器</span></span><br><span class="line">        $try = $b-&gt;getNamespace().<span class="string">'\\Controller\\'</span>.$controller.<span class="string">'Controller'</span>;</span><br><span class="line">        <span class="keyword">if</span> (class_exists($try)) &#123;</span><br><span class="line">            <span class="comment">// 控制器存在直接返回</span></span><br><span class="line">            <span class="keyword">return</span> $try.<span class="string">'::'</span>.$action.<span class="string">'Action'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $bundles[] = $b-&gt;getName();</span><br><span class="line">        $msg = sprintf(<span class="string">'The _controller value "%s:%s:%s" maps to a "%s" class, but this class was not found. Create this class or check the spelling of the class and its namespace.'</span>, $bundle, $controller, $action, $try);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (\count($bundles) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        $msg = sprintf(<span class="string">'Unable to find controller "%s:%s" in bundles %s.'</span>, $bundle, $controller, implode(<span class="string">', '</span>, $bundles));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException($msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>自定义Bundle必须在AppKernel中注册，即在registerBundles函数中声明，否则上面函数中getBundle函数会找不到指定的Bundle。</p><p>\vendor\symfony\symfony\src\Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser.php</p></blockquote><h2 id="解析参数"><a href="#解析参数" class="headerlink" title="解析参数"></a>解析参数</h2><p>返回看<a href="#路由集合">路由集合</a>，在加载完路由配置后，需要解析其中的参数。Router中类的resolveParameters函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveParameters</span><span class="params">(RouteCollection $collection)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">foreach</span> ($collection <span class="keyword">as</span> $route) &#123;</span><br><span class="line">        <span class="comment">// 解析defaults配置项</span></span><br><span class="line">        <span class="keyword">foreach</span> ($route-&gt;getDefaults() <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">            $route-&gt;setDefault($name, <span class="keyword">$this</span>-&gt;resolve($value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析requirements配置项</span></span><br><span class="line">        <span class="keyword">foreach</span> ($route-&gt;getRequirements() <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">            $route-&gt;setRequirement($name, <span class="keyword">$this</span>-&gt;resolve($value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析path配置项</span></span><br><span class="line">        $route-&gt;setPath(<span class="keyword">$this</span>-&gt;resolve($route-&gt;getPath()));</span><br><span class="line">        <span class="comment">// 解析host配置项</span></span><br><span class="line">        $route-&gt;setHost(<span class="keyword">$this</span>-&gt;resolve($route-&gt;getHost()));</span><br><span class="line"></span><br><span class="line">        $schemes = <span class="keyword">array</span>();</span><br><span class="line">        <span class="comment">// 解析schemes配置项</span></span><br><span class="line">        <span class="keyword">foreach</span> ($route-&gt;getSchemes() <span class="keyword">as</span> $scheme) &#123;</span><br><span class="line">            $schemes = array_merge($schemes, explode(<span class="string">'|'</span>, <span class="keyword">$this</span>-&gt;resolve($scheme)));</span><br><span class="line">        &#125;</span><br><span class="line">        $route-&gt;setSchemes($schemes);</span><br><span class="line"></span><br><span class="line">        $methods = <span class="keyword">array</span>();</span><br><span class="line">        <span class="comment">// 解析methods配置项</span></span><br><span class="line">        <span class="keyword">foreach</span> ($route-&gt;getMethods() <span class="keyword">as</span> $method) &#123;</span><br><span class="line">            $methods = array_merge($methods, explode(<span class="string">'|'</span>, <span class="keyword">$this</span>-&gt;resolve($method)));</span><br><span class="line">        &#125;</span><br><span class="line">        $route-&gt;setMethods($methods);</span><br><span class="line">        <span class="comment">// 解析condition配置项</span></span><br><span class="line">        $route-&gt;setCondition(<span class="keyword">$this</span>-&gt;resolve($route-&gt;getCondition()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>可以看出，schemes和methods有两种配置方法，以yaml格式为例，有methods: [get, post]和methods: get|post两种配置方法。</p><p>\vendor\symfony\symfony\src\Symfony\Bundle\FrameworkBundle\Routing\Router.php</p></blockquote><p>resolve函数比较简单，主要解析由%包含的参数。Router类的resolve函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">resolve</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 参数为数组的情况，递归解析</span></span><br><span class="line">    <span class="keyword">if</span> (\is_array($value)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($value <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">            $value[$key] = <span class="keyword">$this</span>-&gt;resolve($val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数不是字符串，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!\is_string($value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容器</span></span><br><span class="line">    $container = <span class="keyword">$this</span>-&gt;container;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析%包围的参数，比如%host%</span></span><br><span class="line">    $escapedValue = preg_replace_callback(<span class="string">'/%%|%([^%\s]++)%/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($match)</span> <span class="title">use</span> <span class="params">($container, $value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// skip %%</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($match[<span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'%%'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/^env\(\w+\)$/'</span>, $match[<span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(sprintf(<span class="string">'Using "%%%s%%" is not allowed in routing configuration.'</span>, $match[<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取参数实际值</span></span><br><span class="line">        $resolved = $container-&gt;getParameter($match[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (\is_string($resolved) || is_numeric($resolved)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;collectedParameters[$match[<span class="number">1</span>]] = $resolved;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (string) $resolved;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(sprintf(</span><br><span class="line">            <span class="string">'The container parameter "%s", used in the route configuration value "%s", '</span>.</span><br><span class="line">            <span class="string">'must be a string or numeric, but it is of type %s.'</span>,</span><br><span class="line">            $match[<span class="number">1</span>],</span><br><span class="line">            $value,</span><br><span class="line">            \gettype($resolved)</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;, $value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'%%'</span>, <span class="string">'%'</span>, $escapedValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>一般自定义参数会在\app\config\parameters.yml和\app\config\services.yml中定义，定义后可以在其他地方以%key%的形式调用。其中\app\config\parameters.yml包含全局自定义参数，\app\config\services.yml包含服务自定义参数。</p><p>\vendor\symfony\symfony\src\Symfony\Bundle\FrameworkBundle\Routing\Router.php</p></blockquote><p>至此，所有路由配置解析完毕，返回RouteCollection对象。RouteCollection类中有两个属性，routes属性保存所有的路由信息，是一个Route对象数组，resources保存已经解析过的资源文件，是一个实现了ResourceInterface接口的对象数组，比如FileResource、DirectoryResource。</p><blockquote><p>ResourceInterface：Symfony\Component\Config\Resource\ResourceInterface</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要讲解Symfony3.4加载路由配置文件并将它解析为RouteCollection对象。&lt;/p&gt;
&lt;h2 id=&quot;订阅事件&quot;&gt;&lt;a href=&quot;#订阅事件&quot; class=&quot;headerlink&quot; title=&quot;订阅事件&quot;&gt;&lt;/a&gt;订阅事件&lt;/h2&gt;&lt;p&gt;router
      
    
    </summary>
    
      <category term="symfony" scheme="https://www.pangpang.fun/categories/symfony/"/>
    
    
      <category term="php" scheme="https://www.pangpang.fun/tags/php/"/>
    
      <category term="symfony" scheme="https://www.pangpang.fun/tags/symfony/"/>
    
      <category term="路由" scheme="https://www.pangpang.fun/tags/%E8%B7%AF%E7%94%B1/"/>
    
      <category term="正则表达式" scheme="https://www.pangpang.fun/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Symfony源码分析</title>
    <link href="https://www.pangpang.fun/2018/08/12/symfony/"/>
    <id>https://www.pangpang.fun/2018/08/12/symfony/</id>
    <published>2018-08-12T05:07:18.000Z</published>
    <updated>2019-11-16T13:10:31.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　Symfony框架</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　Symfony框架&lt;/p&gt;

      
    
    </summary>
    
      <category term="symfony" scheme="https://www.pangpang.fun/categories/symfony/"/>
    
    
      <category term="php" scheme="https://www.pangpang.fun/tags/php/"/>
    
      <category term="symfony" scheme="https://www.pangpang.fun/tags/symfony/"/>
    
  </entry>
  
  <entry>
    <title>Symfony路由机制-一</title>
    <link href="https://www.pangpang.fun/2018/08/07/symfony-routing/"/>
    <id>https://www.pangpang.fun/2018/08/07/symfony-routing/</id>
    <published>2018-08-07T09:01:38.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<p>路由组件是Symfony框架的核心组件之一，主要有如下功能：</p><ul><li>根据URL或者Console命令匹配已配置的路由，映射到具体的控制器中</li><li>在模板（比如Twig）和控制器中生成优雅的URL</li><li>加载Bundle中路由资源（比如routing.yml）</li></ul><p>Symfony在首次请求时会缓存路由，在测试环境下，会在/var/cache/dev下生成appProjectContainerUrlMatcher.php，之后的请求会直接调用该文件中的match方法，加快路由匹配速度。</p><p>比如在/app/config/routing.yml中，有如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default_page:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/default/page/&#123;page&#125;</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="string">'DemoBundle:Default:page'</span></span><br><span class="line">    <span class="attr">defaults:</span></span><br><span class="line">        <span class="attr">page:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">requirements:</span></span><br><span class="line">        <span class="attr">page:</span> <span class="string">'\d+'</span></span><br></pre></td></tr></table></figure><p>会生成下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// default_page</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> === strpos($pathinfo, <span class="string">'/default/page'</span>) &amp;&amp; preg_match(<span class="string">'#^/default/page(?:/(?P&lt;page&gt;\\d+))?$#sD'</span>, $pathinfo, $matches)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;mergeDefaults(array_replace($matches, <span class="keyword">array</span>(<span class="string">'_route'</span> =&gt; <span class="string">'default_page'</span>)), <span class="keyword">array</span> (  <span class="string">'page'</span> =&gt; <span class="number">1</span>,  <span class="string">'_controller'</span> =&gt; <span class="string">'DemoBundle\\Controller\\DefaultController::pageAction'</span>,));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面文章会详细介绍具体细节。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;路由组件是Symfony框架的核心组件之一，主要有如下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据URL或者Console命令匹配已配置的路由，映射到具体的控制器中&lt;/li&gt;
&lt;li&gt;在模板（比如Twig）和控制器中生成优雅的URL&lt;/li&gt;
&lt;li&gt;加载Bundle中路由资源（
      
    
    </summary>
    
      <category term="symfony" scheme="https://www.pangpang.fun/categories/symfony/"/>
    
    
      <category term="php" scheme="https://www.pangpang.fun/tags/php/"/>
    
      <category term="symfony" scheme="https://www.pangpang.fun/tags/symfony/"/>
    
      <category term="路由" scheme="https://www.pangpang.fun/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode859. 亲密字符串</title>
    <link href="https://www.pangpang.fun/2018/08/06/buddy-string/"/>
    <id>https://www.pangpang.fun/2018/08/06/buddy-string/</id>
    <published>2018-08-05T16:19:52.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/buddy-strings" title="leetcode859" target="_blank" rel="noopener">https://leetcode.com/problems/buddy-strings</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">function buddyStrings(string $a, string $b) :bool &#123;</span><br><span class="line">    $aLength = strlen($a);</span><br><span class="line">    $bLength = strlen($b);</span><br><span class="line"></span><br><span class="line">    if ($aLength != $bLength) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($aLength &lt; 2) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $canChange = false;</span><br><span class="line">    $hashMap = [];</span><br><span class="line">    $diff = 0;</span><br><span class="line">    $indexOne = -1;</span><br><span class="line">    $indexTwo = -1;</span><br><span class="line"></span><br><span class="line">    for ($i = 0; $i &lt; $aLength; $i++) &#123;</span><br><span class="line">        if (isset($hashMap[$a[$i]])) &#123;</span><br><span class="line">            ++$hashMap[$a[$i]];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $hashMap[$a[$i]] = 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($hashMap[$a[$i]] &gt;= 2) &#123;</span><br><span class="line">            $canChange = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($a[$i] != $b[$i]) &#123;</span><br><span class="line">            $diff++;</span><br><span class="line"></span><br><span class="line">            if ($indexOne == -1) &#123;</span><br><span class="line">                $indexOne = $i;</span><br><span class="line">            &#125; elseif ($indexTwo == -1) &#123;</span><br><span class="line">                $indexTwo = $i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return ($diff == 0 &amp;&amp; $canChange)</span><br><span class="line">        || ($diff == 2 &amp;&amp; $a[$indexOne] == $b[$indexTwo] &amp;&amp; $a[$indexTwo] == $b[$indexOne]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/buddy-strings&quot; title=&quot;l
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode686. 重复叠加字符串匹配</title>
    <link href="https://www.pangpang.fun/2018/08/05/repeated-string-match/"/>
    <id>https://www.pangpang.fun/2018/08/05/repeated-string-match/</id>
    <published>2018-08-05T15:18:32.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode-cn.com/problems/repeated-string-match" title="leetcode686" target="_blank" rel="noopener">https://leetcode.com/problems/repeated-string-match</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function repeatedStringMatch(string $a, string $b) :int &#123;</span><br><span class="line">    $aLength = strlen($a);</span><br><span class="line">    $bLength = strlen($b);</span><br><span class="line"></span><br><span class="line">    for ($i = 0; $i &lt; $aLength; $i++) &#123;</span><br><span class="line">        for ($j = 0; $j &lt; $bLength &amp;&amp; $a[($i + $j) % $aLength] == $b[$j]; $j++);</span><br><span class="line"></span><br><span class="line">        if ($j == $bLength) &#123;</span><br><span class="line">            return intdiv($i + $j - 1, $aLength) + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="/2018/08/04/implement-strstr">Leetcode28</a>的变形。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/repeated-string-matc
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode443. 压缩字符串</title>
    <link href="https://www.pangpang.fun/2018/08/05/string-compression/"/>
    <id>https://www.pangpang.fun/2018/08/05/string-compression/</id>
    <published>2018-08-05T11:27:46.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/string-compression" title="leetcode443" target="_blank" rel="noopener">https://leetcode.com/problems/string-compression</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function compress(array $chars) :int &#123;</span><br><span class="line">    $count = count($chars);</span><br><span class="line">    $index = 0;</span><br><span class="line">    $i = 0;</span><br><span class="line"></span><br><span class="line">    while ($i &lt; $count) &#123;</span><br><span class="line">        $currentChar = $chars[$i];</span><br><span class="line">        $n = 0;</span><br><span class="line"></span><br><span class="line">        while ($i &lt; $count &amp;&amp; $chars[$i] == $currentChar) &#123;</span><br><span class="line">            $i++;</span><br><span class="line">            $n++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $chars[$index++] = $currentChar;</span><br><span class="line"></span><br><span class="line">        if ($n == 1) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $nStr = (string) $n;</span><br><span class="line">        $nLen = strlen($nStr);</span><br><span class="line"></span><br><span class="line">        for ($j = 0; $j &lt; $nLen; $j++) &#123;</span><br><span class="line">            $chars[$index++] = $nStr[$j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/string-compression&quot; tit
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode20. 有效的括号</title>
    <link href="https://www.pangpang.fun/2018/08/05/valid-parentheses/"/>
    <id>https://www.pangpang.fun/2018/08/05/valid-parentheses/</id>
    <published>2018-08-05T08:22:04.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/valid-parentheses" title="leetcode20" target="_blank" rel="noopener">https://leetcode.com/problems/valid-parentheses</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">function isValidParentheses(string $str) :bool &#123;</span><br><span class="line">    $stack = new SplStack();</span><br><span class="line">    $length = strlen($str);</span><br><span class="line">    $leftBrackets = [</span><br><span class="line">        &apos;(&apos; =&gt; 1,</span><br><span class="line">        &apos;&#123;&apos; =&gt; 2,</span><br><span class="line">        &apos;[&apos; =&gt; 3,</span><br><span class="line">    ];</span><br><span class="line">    $rightBrackets = [</span><br><span class="line">        &apos;)&apos; =&gt; 1,</span><br><span class="line">        &apos;&#125;&apos; =&gt; 2,</span><br><span class="line">        &apos;]&apos; =&gt; 3,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    for ($i = 0; $i &lt; $length; $i++) &#123;</span><br><span class="line">        if (isset($leftBrackets[$str[$i]])) &#123;</span><br><span class="line">            $stack-&gt;push($str[$i]);</span><br><span class="line">        &#125; elseif (isset($rightBrackets[$str[$i]])) &#123;</span><br><span class="line">            if ($stack-&gt;isEmpty()) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $leftBracket = $stack-&gt;pop();</span><br><span class="line"></span><br><span class="line">            if ($leftBrackets[$leftBracket] != $rightBrackets[$str[$i]]) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $stack-&gt;isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-parentheses&quot; titl
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
      <category term="栈" scheme="https://www.pangpang.fun/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode125. 验证回文串</title>
    <link href="https://www.pangpang.fun/2018/08/05/valid-palindrome/"/>
    <id>https://www.pangpang.fun/2018/08/05/valid-palindrome/</id>
    <published>2018-08-05T05:48:57.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/valid-palindrome" title="leetcode125" target="_blank" rel="noopener">https://leetcode.com/problems/valid-palindrome</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">function isPalindrome(string $str) :bool &#123;</span><br><span class="line">    $length = strlen($str);</span><br><span class="line"></span><br><span class="line">    if ($length == 0) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $i = 0;</span><br><span class="line">    $j = $length -  1;</span><br><span class="line">    $str = strtolower($str);</span><br><span class="line"></span><br><span class="line">    while ($i &lt;= $j) &#123;</span><br><span class="line">        while ($i &lt;= $j &amp;&amp; !isNumericOrLetter($str[$i])) &#123;</span><br><span class="line">            $i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while ($i &lt;= $j &amp;&amp; !isNumericOrLetter($str[$j])) &#123;</span><br><span class="line">            $j--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($str[$i] != $str[$j]) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $i++;</span><br><span class="line">        $j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isNumericOrLetter(string $char) :bool &#123;</span><br><span class="line">    if ((ord($char) &lt;= ord(&apos;9&apos;) &amp;&amp; ord($char) &gt;= ord(&apos;0&apos;))</span><br><span class="line">        || (ord($char) &lt;= ord(&apos;z&apos;) &amp;&amp; ord($char) &gt;= ord(&apos;a&apos;))) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-palindrome&quot; title
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
      <category term="双指针" scheme="https://www.pangpang.fun/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode28. 实现strStr()</title>
    <link href="https://www.pangpang.fun/2018/08/04/implement-strstr/"/>
    <id>https://www.pangpang.fun/2018/08/04/implement-strstr/</id>
    <published>2018-08-04T10:51:12.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/implement-strstr" title="leetcode28" target="_blank" rel="noopener">https://leetcode.com/problems/implement-strstr</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function strStrN(string $haystack, string $needle) :int &#123;</span><br><span class="line">    $lengthNeedle = strlen($needle);</span><br><span class="line"></span><br><span class="line">    if ($lengthNeedle == 0) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $lengthHaystack = strlen($haystack);</span><br><span class="line"></span><br><span class="line">    $i = $j = 0;</span><br><span class="line"></span><br><span class="line">    while ($i &lt;= $lengthHaystack - $lengthNeedle) &#123;</span><br><span class="line">        for ($j = $lengthNeedle - 1; $j &gt;= 0; $j--) &#123;</span><br><span class="line">            if ($haystack[$i + $j] != $needle[$j]) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($j == -1) &#123;</span><br><span class="line">            return $i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于PHP中<a href="http://php.net/manual/zh/function.strpos.php" title="strpos" target="_blank" rel="noopener">strpos</a>函数，可以使用KMP算法、BM算法来解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/implement-strstr&quot; title
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode345. 反转字符串中的元音字母</title>
    <link href="https://www.pangpang.fun/2018/08/02/reverse-vowels-of-a-string/"/>
    <id>https://www.pangpang.fun/2018/08/02/reverse-vowels-of-a-string/</id>
    <published>2018-08-02T09:28:13.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/reverse-vowels-of-a-string" title="leetcode345" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-vowels-of-a-string</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">function reverseVowels(string $str) :string &#123;</span><br><span class="line">    $vowels = [</span><br><span class="line">        &apos;A&apos; =&gt; 1,</span><br><span class="line">        &apos;a&apos; =&gt; 1,</span><br><span class="line">        &apos;E&apos; =&gt; 1,</span><br><span class="line">        &apos;e&apos; =&gt; 1,</span><br><span class="line">        &apos;I&apos; =&gt; 1,</span><br><span class="line">        &apos;i&apos; =&gt; 1,</span><br><span class="line">        &apos;O&apos; =&gt; 1,</span><br><span class="line">        &apos;o&apos; =&gt; 1,</span><br><span class="line">        &apos;U&apos; =&gt; 1,</span><br><span class="line">        &apos;u&apos; =&gt; 1,</span><br><span class="line">    ];</span><br><span class="line">    $i = 0;</span><br><span class="line">    $j = strlen($str) - 1;</span><br><span class="line"></span><br><span class="line">    while ($i &lt; $j) &#123;</span><br><span class="line">        while ($i &lt; $j &amp;&amp; !isset($vowels[$str[$i]])) &#123;</span><br><span class="line">            $i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while ($i &lt; $j &amp;&amp; !isset($vowels[$str[$j]])) &#123;</span><br><span class="line">            $j--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        list($str[$i], $str[$j]) = [$str[$j], $str[$i]];</span><br><span class="line">        $i++;</span><br><span class="line">        $j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>标准双指针解法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-vowels-of-a-str
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
      <category term="双指针" scheme="https://www.pangpang.fun/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode67. 二进制求和</title>
    <link href="https://www.pangpang.fun/2018/08/02/add-binary/"/>
    <id>https://www.pangpang.fun/2018/08/02/add-binary/</id>
    <published>2018-08-02T08:31:48.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/add-binary" title="leetcode67" target="_blank" rel="noopener">https://leetcode.com/problems/add-binary</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function addBinary(string $a, string $b, int $n = 2) :string &#123;</span><br><span class="line">    $i = strlen($a) - 1;</span><br><span class="line">    $j = strlen($b) - 1;</span><br><span class="line">    $result = &apos;&apos;;</span><br><span class="line">    $carry = 0;</span><br><span class="line"></span><br><span class="line">    while ($i &gt;= 0 || $j &gt;= 0) &#123;</span><br><span class="line">        $sum = $carry;</span><br><span class="line">        if ($i &gt;= 0) &#123;</span><br><span class="line">            $sum += $a[$i--];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($j &gt;= 0) &#123;</span><br><span class="line">            $sum += $b[$j--];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $result = ($sum % $n) . $result;</span><br><span class="line">        $carry = intdiv($sum, $n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($carry != 0) &#123;</span><br><span class="line">        $result = $carry . $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-binary&quot; title=&quot;leet
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode788. 旋转数字</title>
    <link href="https://www.pangpang.fun/2018/08/01/rotated-digits/"/>
    <id>https://www.pangpang.fun/2018/08/01/rotated-digits/</id>
    <published>2018-08-01T14:24:49.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/rotated-digits" title="leetcode788" target="_blank" rel="noopener">https://leetcode.com/problems/rotated-digits</a></p><h2 id="Code1"><a href="#Code1" class="headerlink" title="Code1"></a>Code1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function rotatedDigits(int $n) :int &#123;</span><br><span class="line">    $result = 0;</span><br><span class="line"></span><br><span class="line">    for ($i = 1; $i &lt;= $n; $i++) &#123;</span><br><span class="line">        if (isValid($i)) &#123;</span><br><span class="line">            $result++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isValid(int $n) :bool &#123;</span><br><span class="line">    $valid = false;</span><br><span class="line"></span><br><span class="line">    while ($n &gt; 0) &#123;</span><br><span class="line">        if ($n % 10 == 2 || $n % 10 == 5 || $n % 10 == 6 || $n % 10 == 9) &#123;</span><br><span class="line">            $valid = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($n % 10 == 3 || $n % 10 == 4 || $n % 10 == 7) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $n = intdiv($n, 10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $valid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Code2"><a href="#Code2" class="headerlink" title="Code2"></a>Code2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function rotatedDigits(int $n) :int &#123;</span><br><span class="line">    $result = 0;</span><br><span class="line">    $dp = array_fill(0, $n + 1, 0);</span><br><span class="line"></span><br><span class="line">    // $dp[$i]=0，无效；$dp[$i]=1，有效，旋转后相等；$dp[$i]=2，有效，旋转后不相等；</span><br><span class="line">    for ($i = 0; $i &lt;= $n; $i++) &#123;</span><br><span class="line">        if ($i &lt; 10) &#123;</span><br><span class="line">            if ($i == 0 || $i == 1 || $i == 8) &#123;</span><br><span class="line">                $dp[$i] = 1;</span><br><span class="line">            &#125; elseif ($i == 2 || $i == 5 || $i == 6 || $i == 9) &#123;</span><br><span class="line">                $dp[$i] = 2;</span><br><span class="line">                $result++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $a = $dp[intdiv($i, 10)];</span><br><span class="line">            $b = $dp[$i % 10];</span><br><span class="line"></span><br><span class="line">            if ($a == 1 &amp;&amp; $b == 1) &#123;</span><br><span class="line">                $dp[$i] = 1;</span><br><span class="line">            &#125; elseif ($a &gt;= 1 &amp;&amp; $b &gt;= 1) &#123;</span><br><span class="line">                $dp[$i] = 2;</span><br><span class="line">                $result++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/rotated-digits&quot; title=&quot;
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode696. 计数二进制子串</title>
    <link href="https://www.pangpang.fun/2018/08/01/count-binary-substrings/"/>
    <id>https://www.pangpang.fun/2018/08/01/count-binary-substrings/</id>
    <published>2018-08-01T11:20:26.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/count-binary-substrings" title="leetcode696" target="_blank" rel="noopener">https://leetcode.com/problems/count-binary-substrings</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function countBinarySubstrings(string $str) :int &#123;</span><br><span class="line">    $length = strlen($str);</span><br><span class="line">    $result = 0;</span><br><span class="line">    $preCount = $curCount = 1;</span><br><span class="line"></span><br><span class="line">    for ($i = 1; $i &lt; $length; $i++) &#123;</span><br><span class="line">        if ($str[$i] != $str[$i - 1]) &#123;</span><br><span class="line">            $preCount = $curCount;</span><br><span class="line">            $curCount = 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $curCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($preCount &gt;= $curCount) &#123;</span><br><span class="line">            $result++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/count-binary-substrings
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode13. 罗马数字转整数</title>
    <link href="https://www.pangpang.fun/2018/08/01/roman-to-integer/"/>
    <id>https://www.pangpang.fun/2018/08/01/roman-to-integer/</id>
    <published>2018-08-01T05:24:16.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/roman-to-integer" title="leetcode13" target="_blank" rel="noopener">https://leetcode.com/problems/roman-to-integer</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function romanToInt(string $str) :int &#123;</span><br><span class="line">    $map = [</span><br><span class="line">        &apos;I&apos; =&gt; 1,</span><br><span class="line">        &apos;V&apos; =&gt; 5,</span><br><span class="line">        &apos;X&apos; =&gt; 10,</span><br><span class="line">        &apos;L&apos; =&gt; 50,</span><br><span class="line">        &apos;C&apos; =&gt; 100,</span><br><span class="line">        &apos;D&apos; =&gt; 500,</span><br><span class="line">        &apos;M&apos; =&gt; 1000</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $length = strlen($str);</span><br><span class="line"></span><br><span class="line">    if ($length == 0) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $sum = $map[$str[$length - 1]];</span><br><span class="line"></span><br><span class="line">    for ($i = $length - 2; $i &gt;= 0; $i--) &#123;</span><br><span class="line">        if ($map[$str[$i]] &lt; $map[$str[$i + 1]]) &#123;</span><br><span class="line">            $sum -= $map[$str[$i]];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $sum += $map[$str[$i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/roman-to-integer&quot; title
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode557. 反转字符串中的单词III</title>
    <link href="https://www.pangpang.fun/2018/08/01/reverse-words-in-a-string-iii/"/>
    <id>https://www.pangpang.fun/2018/08/01/reverse-words-in-a-string-iii/</id>
    <published>2018-08-01T05:02:49.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/reverse-words-in-a-string-iii" title="leetcode557" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-words-in-a-string-iii</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function reverseWords(string $str) :string &#123;</span><br><span class="line">    $length = strlen($str);</span><br><span class="line">    $start = 0;</span><br><span class="line"></span><br><span class="line">    for ($i = 0; $i &lt;= $length; $i++) &#123;</span><br><span class="line">        if ($i == $length || $str[$i] == &apos; &apos;) &#123;</span><br><span class="line">            $str = doReverse($str, $start, $i - 1);</span><br><span class="line">            $start = $i + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function doReverse(string $str, int $start, int $end) :string &#123;</span><br><span class="line">    while ($start &lt; $end) &#123;</span><br><span class="line">        $temp = $str[$start];</span><br><span class="line">        $str[$start] = $str[$end];</span><br><span class="line">        $str[$end] = $temp;</span><br><span class="line">        $start++;</span><br><span class="line">        $end--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-words-in-a-stri
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode344. 反转字符串</title>
    <link href="https://www.pangpang.fun/2018/08/01/reverse-string/"/>
    <id>https://www.pangpang.fun/2018/08/01/reverse-string/</id>
    <published>2018-08-01T04:00:08.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/reverse-string" title="leetcode344" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-string</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function reverseString(string $str) :string &#123;</span><br><span class="line">    $i = 0;</span><br><span class="line">    $j = strlen($str) - 1;</span><br><span class="line"></span><br><span class="line">    while ($i &lt; $j) &#123;</span><br><span class="line">        $temp = $str[$i];</span><br><span class="line">        $str[$i] = $str[$j];</span><br><span class="line">        $str[$j] = $temp;</span><br><span class="line">        $i++;</span><br><span class="line">        $j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-string&quot; title=&quot;
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode657. 判断路线成圈</title>
    <link href="https://www.pangpang.fun/2018/07/31/judge-route-circle/"/>
    <id>https://www.pangpang.fun/2018/07/31/judge-route-circle/</id>
    <published>2018-07-31T15:41:53.000Z</published>
    <updated>2019-11-16T13:10:31.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p><a href="https://leetcode.com/problems/judge-route-circle" title="leetcode657" target="_blank" rel="noopener">https://leetcode.com/problems/judge-route-circle</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function judgeCircle(string $moves) :bool &#123;</span><br><span class="line">    $length = strlen($moves);</span><br><span class="line">    $x = $y = 0;</span><br><span class="line"></span><br><span class="line">    for ($i = 0; $i &lt; $length; $i++) &#123;</span><br><span class="line">        if ($moves[$i] == &apos;U&apos;) &#123;</span><br><span class="line">            $y++;</span><br><span class="line">        &#125; elseif ($moves[$i] == &apos;D&apos;) &#123;</span><br><span class="line">            $y--;</span><br><span class="line">        &#125; elseif ($moves[$i] == &apos;R&apos;) &#123;</span><br><span class="line">            $x++;</span><br><span class="line">        &#125; elseif ($moves[$i] == &apos;L&apos;) &#123;</span><br><span class="line">            $x--;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $x == 0 &amp;&amp; $y == 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目地址&quot;&gt;&lt;a href=&quot;#题目地址&quot; class=&quot;headerlink&quot; title=&quot;题目地址&quot;&gt;&lt;/a&gt;题目地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/judge-route-circle&quot; tit
      
    
    </summary>
    
      <category term="leetcode" scheme="https://www.pangpang.fun/categories/leetcode/"/>
    
      <category term="string" scheme="https://www.pangpang.fun/categories/leetcode/string/"/>
    
      <category term="easy" scheme="https://www.pangpang.fun/categories/leetcode/string/easy/"/>
    
    
      <category term="leetcode" scheme="https://www.pangpang.fun/tags/leetcode/"/>
    
  </entry>
  
</feed>
